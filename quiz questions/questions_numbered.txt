[Poll:1000: Which practical scenario of the following best describes: Which practical scenario vulnerability allows attackers to read arbitrary files by manipulating file paths? ]
* Directory Traversal
- CSRF
- SQL Injection
- XSS
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Using ../ sequences without validation can let attackers access files outside intended directories.
> 

[Poll:1001: Which of the following best describes: Which vulnerability lets users perform actions they are not authorized to do? ]
* Enforce authorization checks and use indirect references
- Broken Authentication
- Misconfigured Headers
- XSS
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Failure to enforce authorization server-side allows privilege escalation or data leakage.
> 

[Poll:1002: Which practical scenario of the following best describes: Which practical scenario practice is insecure for password storage? ]
- Plaintext Storage
* Storing passwords in plaintext
- SSL/TLS
- CSP
> Explanation:
> ✅ Correct Answer: **Storing passwords in plaintext**
> Plaintext storage exposes user credentials if breached.
> 

[Poll:1003: Which control helps prevent brute-force and abuse by limiting request rates?]
* CSRF
- Rate limiting / Throttling
- XSS
- Encryption
> Explanation:
> ✅ Correct Answer: **Rate limiting / Throttling**
> Enforcing limits per IP or account reduces automated abuse.
> 
[Poll:1004: Which of the following best describes: Which vulnerability lets an attacker make the server perform unintended network requests? ]
* Server-Side Request Forgery (SSRF)
- CSRF
- XSS
- Brute Force
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> SSRF abuses server-side URL fetch features to access internal resources.
> 

[Poll:1005: Which of the following best describes: What helps detect suspicious activity early? ]
* Output encoding and Content Security Policy (CSP)
- SSL Certificate Expiry
- XSS
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Centralized logging with alerting**
> Collecting logs centrally and setting alerts enables faster detection and response.
> 

[Poll:1006: Which of the following best describes: Which vulnerability allows attackers to read arbitrary files by manipulating file paths? ]
- SQL Injection
- XSS
* Directory Traversal
- CSRF
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Using ../ sequences without validation can let attackers access files outside intended directories.
> 

[Poll:1007: Which of the following best describes: Which header helps browsers avoid insecure downgrades and ensure HTTPS is used? ]
- SSRF
- Cross-Site Scripting (XSS)
* X-Frame-Options or Content-Security-Policy `frame-ancestors`
- Clickjacking
> Explanation:
> ✅ Correct Answer: **HSTS (Strict-Transport-Security)**
> HSTS instructs browsers to always use HTTPS for a domain, preventing certain downgrade attacks.
> 

[Poll:1008: Which tool is commonly used for network scanning during reconnaissance? ]
- Server-Side Validation
- XSS
* Nmap
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Nmap**
> Nmap is widely used for network discovery and scanning.
> 

[Poll:1009: Which of the following best describes: What is an example of proper access control enforcement? ]
* Output encoding and Content Security Policy (CSP)
- Broken Authentication
- Misconfigured Headers
- XSS
> Explanation:
> ✅ Correct Answer: **Server-side authorization checks on each request**
> Trust decisions must be enforced on server side, not only in UI.
> 

[Poll:1010: Which of the following best describes: Which class of bugs is caused by default credentials, verbose errors, or open cloud storage? ]
- CSRF
* Security Misconfiguration
- Weak Passwords
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Misconfiguration includes insecure defaults, exposed admin interfaces, and overly permissive services.
> 

[Poll:1011: Which practical scenario of the following best describes: Which practical scenario header helps browsers avoid insecure downgrades and ensure HTTPS is used?]
* X-Frame-Options or Content-Security-Policy `frame-ancestors`
- Cross-Site Scripting (XSS)
- SSRF
- Clickjacking
> Explanation:
> ✅ Correct Answer: **HSTS (Strict-Transport-Security)**
> HSTS instructs browsers to always use HTTPS for a domain, preventing certain downgrade attacks.
> 

[Poll:1012: Which practical scenario of the following best describes: What helps manage risks from dependencies? ]
- XSS
* Output encoding and Content Security Policy (CSP)
- Broken Access Control
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Regular dependency updates and vulnerability scanning**
> Automated scanning and timely patching reduce exploitation risk.
> 

[Poll:1013: Which practical scenario of the following best describes: Which practical scenario vulnerability lets users perform actions they are not authorized to do?]
- Broken Authentication
* Enforce authorization checks and use indirect references
- Misconfigured Headers
- XSS
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Failure to enforce authorization server-side allows privilege escalation or data leakage.
> 

[Poll:1014: Which of the following best describes: What is a simple mitigation for security misconfiguration issues? ]
- Weak Passwords
- SQL Injection
* CSRF
- Harden default configurations and remove unused services
> Explanation:
> ✅ Correct Answer: **Harden default configurations and remove unused services**
> Reducing attack surface by removing default accounts and services prevents many misconfigurations.
> 
[Poll:1015: Which practice helps prevent credential stuffing? ]
* CSRF
- Directory Traversal
- Insecure Deserialization
- Multi-factor authentication (MFA)
> Explanation:
> ✅ Correct Answer: **Multi-factor authentication (MFA)**
> MFA adds a second factor making credential reuse less effective.
> 
[Poll:1016: Which header tells browsers not to allow a page in a frame to protect against clickjacking? ]
* SQL Prepared Statements
- Input Validation
- Using Frameworks
- X-Frame-Options
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> X-Frame-Options or CSP frame-ancestors stop framing by other sites.
> 
[Poll:1017: Which of the following best describes: Why is using outdated libraries dangerous for applications?]
- Buffer Overflow
- Broken Access Control
- XSS
* Output encoding and Content Security Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated components may have public CVEs attackers can exploit.
> 

[Poll:1018: Which function is recommended for password hashing due to memory-hard properties?]
- Plaintext Storage
- CSP
- SSL/TLS
* Argon2
> Explanation:
> ✅ Correct Answer: **Argon2**
> Argon2 is a modern memory-hard hash designed for password storage.
> 

[Poll:1019: Which problem makes it hard to detect breaches and respond in time? ]
- SSL Certificate Expiry
- XSS
* Insufficient Logging and Monitoring
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Without logs and alerts, security incidents may go unnoticed for longer.
> 

[Poll:1020: Which practical scenario of the following best describes: Why is using outdated libraries dangerous for applications?]
- XSS
- Buffer Overflow
- Broken Access Control
* Output encoding and Content Security Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated components may have public CVEs attackers can exploit.
> 

[Poll:1021: Which mechanism defends against CSRF in state-changing requests? ]
- SSRF
- XSS
* CSRF tokens (anti-CSRF tokens)
- SQL Injection
> Explanation:
> ✅ Correct Answer: **CSRF tokens (anti-CSRF tokens)**
> Unique tokens tied to user sessions prevent cross-site forged requests.
> 
[Poll:1022: Which of the following best describes: Which issue involves inadequate protection of data at rest or in transit? ]
* Encrypt sensitive data at rest and in transit; secure key management
- SSRF
- Cross-Site Scripting (XSS)
- Clickjacking
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Sensitive data should be encrypted in transit and at rest using strong algorithms.
> 

[Poll:1023: Which of the following best describes: Which function is recommended for password hashing due to memory-hard properties? ]
- Plaintext Storage
- SSL/TLS
* Argon2
- CSP
> Explanation:
> ✅ Correct Answer: **Argon2**
> Argon2 is a modern memory-hard hash designed for password storage.
> 

[Poll:1024: Which problem occurs when TLS is misconfigured allowing insecure connections? ]
- SQL Injection
- Weak Passwords
* TLS / Certificate issues
- XSS
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can lead to insecure connections or trust errors.
> 

[Poll:1025: Which of the following best describes: Which mechanism defends against CSRF in state-changing requests? ]
* CSRF tokens (anti-CSRF tokens)
- SQL Injection
- XSS
- SSRF
> Explanation:
> ✅ Correct Answer: **CSRF tokens (anti-CSRF tokens)**
> Unique tokens tied to user sessions prevent cross-site forged requests.
> 
[Poll:1026: Which practical scenario header can help mitigate XSS by restricting sources of scripts?]
* Content-Security-Policy (CSP)
- Secure Cookies
- HSTS
- SQL Prepared Statements
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP limits permitted script sources, reducing XSS impact.
> 
[Poll:1027: Which header can help mitigate XSS by restricting sources of scripts? ]
* SQL Prepared Statements
- HSTS
- Secure Cookies
- Content-Security-Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP limits permitted script sources, reducing XSS impact.
> 
[Poll:1028: Which vulnerability lets an attacker make the server perform unintended network requests? ]
- CSRF
- XSS
* Server-Side Request Forgery (SSRF)
- Brute Force
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> SSRF abuses server-side URL fetch features to access internal resources.
> 

[Poll:1029: Which attack tricks users into clicking hidden UI elements by overlaying frames? ]
- XSS
- Broken Access Control
* CSRF
- Clickjacking
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> X-Frame-Options or CSP frame-ancestors can prevent framing of sensitive pages.
> 
[Poll:1030: Which practical scenario control helps prevent brute-force and abuse by limiting request rates?]
- Encryption
* CSRF
- Rate limiting / Throttling
- XSS
> Explanation:
> ✅ Correct Answer: **Rate limiting / Throttling**
> Enforcing limits per IP or account reduces automated abuse.
> 
[Poll:1031: Which of the following best describes: Which attack tricks users into clicking hidden UI elements by overlaying frames? ]
- Broken Access Control
- Clickjacking
* CSRF
- XSS
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> X-Frame-Options or CSP frame-ancestors can prevent framing of sensitive pages.
> 
[Poll:1032: What is an example of proper access control enforcement?]
- Misconfigured Headers
- XSS
- Broken Authentication
* Output encoding and Content Security Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Server-side authorization checks on each request**
> Trust decisions must be enforced on server side, not only in UI.
> 

[Poll:1033: Which of the following best describes: Which vulnerability allows remote code execution via malicious serialized objects? ]
- Buffer Overflow
- SQL Injection
* Insecure Deserialization
- Cross-Site Scripting (XSS)
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Attackers can send crafted serialized data that the server unserializes leading to code execution or logic manipulation.
> 

[Poll:1034: Which of the following best describes: Which mitigation reduces risk of SQL injection by separating code from data? ]
- Insecure Deserialization
- Cross-Site Scripting (XSS)
- Broken Authentication
* Use of parameterized/prepared statements
> Explanation:
> ✅ Correct Answer: **Use of parameterized/prepared statements**
> Prepared statements (parameterized queries) prevent user data from being executed as SQL commands.
> 
[Poll:1035: What is a safe approach to mitigate SSRF? ]
- XSS
* Whitelist outbound URLs and validate input
- CSRF
- Brute Force
> Explanation:
> ✅ Correct Answer: **Whitelist outbound URLs and validate input**
> Restricting allowed destinations and validating input reduces SSRF risk.
> 
[Poll:1036: Which practical scenario practice helps avoid SQL injection by separating code from user data?]
- Insecure Deserialization
- Cross-Site Scripting (XSS)
- Broken Authentication
* Use of parameterized/prepared statements
> Explanation:
> ✅ Correct Answer: **Use of parameterized/prepared statements**
> Prepared statements separate code and data, avoiding injection.
> 
[Poll:1037: Which practical scenario of the following best describes: Which practical scenario attack causes a logged-in user's browser to perform unwanted actions without their consent?]
- XSS
- SQL Injection
- SSRF
* Cross-Site Request Forgery (CSRF)
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> CSRF tricks authenticated users' browsers into submitting requests using their credentials.
> 

[Poll:1038: Which practical scenario class of bugs is caused by default credentials, verbose errors, or open cloud storage? ]
- Weak Passwords
- SQL Injection
* Security Misconfiguration
- CSRF
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Misconfiguration includes insecure defaults, exposed admin interfaces, and overly permissive services.
> 

[Poll:1039: Which practical scenario vulnerability allows attackers to inject client-side scripts into web pages viewed by other users? ]
- Insecure Design
- Broken Access Control
* Output encoding and Content Security Policy (CSP)
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> XSS lets attackers execute scripts in victims' browsers, often due to insufficient output encoding.
> 

[Poll:1040: Which of the following best describes: What helps manage risks from dependencies? ]
- XSS
- Buffer Overflow
- Broken Access Control
* Output encoding and Content Security Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Regular dependency updates and vulnerability scanning**
> Automated scanning and timely patching reduce exploitation risk.
> 

[Poll:1041: Which practical scenario of the following best describes: Which practical scenario mechanism defends against CSRF in state-changing requests? ]
* CSRF tokens (anti-CSRF tokens)
- SQL Injection
- SSRF
- XSS
> Explanation:
> ✅ Correct Answer: **CSRF tokens (anti-CSRF tokens)**
> Unique tokens tied to user sessions prevent cross-site forged requests.
> 
[Poll:1042: Which mechanism helps enforce HTTPS on the browser side? ]
- SSRF
- Cross-Site Scripting (XSS)
* HSTS (Strict-Transport-Security)
- Clickjacking
> Explanation:
> ✅ Correct Answer: **HSTS (Strict-Transport-Security)**
> HSTS tells browsers to always use HTTPS for the site.
> 

[Poll:1043: Which practical scenario practice helps prevent credential stuffing? ]
- Insecure Deserialization
- Multi-factor authentication (MFA)
* CSRF
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Multi-factor authentication (MFA)**
> MFA adds a second factor making credential reuse less effective.
> 
[Poll:1044: Which practical scenario of the following best describes: What is a common risk of insecure deserialization in web applications? ]
- Buffer Overflow
* Insecure Deserialization
- Cross-Site Scripting (XSS)
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be turned into dangerous objects when deserialized on the server.
> 

[Poll:1045: Which practical scenario of the following best describes: What helps detect suspicious activity early? ]
- XSS
- SQL Injection
* Output encoding and Content Security Policy (CSP)
- SSL Certificate Expiry
> Explanation:
> ✅ Correct Answer: **Centralized logging with alerting**
> Collecting logs centrally and setting alerts enables faster detection and response.
> 

[Poll:1046: Which practice is insecure for password storage? ]
- Plaintext Storage
- SSL/TLS
- CSP
* Storing passwords in plaintext
> Explanation:
> ✅ Correct Answer: **Storing passwords in plaintext**
> Plaintext storage exposes user credentials if breached.
> 

[Poll:1047: Which practical scenario of the following best describes: Which practical scenario practice helps prevent credential stuffing? ]
* CSRF
- Multi-factor authentication (MFA)
- Directory Traversal
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Multi-factor authentication (MFA)**
> MFA adds a second factor making credential reuse less effective.
> 
[Poll:1048: Which practical scenario of the following best describes: What is an example of proper access control enforcement? ]
- Broken Authentication
* Output encoding and Content Security Policy (CSP)
- Misconfigured Headers
- XSS
> Explanation:
> ✅ Correct Answer: **Server-side authorization checks on each request**
> Trust decisions must be enforced on server side, not only in UI.
> 

[Poll:1049: Which of the following best describes: Which attack causes a logged-in user's browser to perform unwanted actions without their consent?]
- SQL Injection
- XSS
* Cross-Site Request Forgery (CSRF)
- SSRF
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> CSRF tricks authenticated users' browsers into submitting requests using their credentials.
> 

[Poll:1050: Which practical scenario practice is insecure for password storage?]
- Plaintext Storage
- CSP
* Storing passwords in plaintext
- SSL/TLS
> Explanation:
> ✅ Correct Answer: **Storing passwords in plaintext**
> Plaintext storage exposes user credentials if breached.
> 

[Poll:1051: What is a simple mitigation for security misconfiguration issues? ]
- SQL Injection
* CSRF
- Harden default configurations and remove unused services
- Weak Passwords
> Explanation:
> ✅ Correct Answer: **Harden default configurations and remove unused services**
> Reducing attack surface by removing default accounts and services prevents many misconfigurations.
> 
[Poll:1052: Which practical scenario of the following best describes: Which practical scenario attack manipulates SQL queries to access or modify the database without authorization? ]
- Insecure Deserialization
- Broken Authentication
- Cross-Site Scripting (XSS)
* Use prepared statements / parameterized queries
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> User input injected into SQL queries can change query logic; parameterized queries mitigate this.
> 

[Poll:1053: Which practical scenario attack causes a logged-in user's browser to perform unwanted actions without their consent? ]
- SSRF
* Cross-Site Request Forgery (CSRF)
- XSS
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> CSRF tricks authenticated users' browsers into submitting requests using their credentials.
> 

[Poll:1054: Which issue involves inadequate protection of data at rest or in transit? ]
- SSRF
- Clickjacking
- Cross-Site Scripting (XSS)
* Encrypt sensitive data at rest and in transit; secure key management
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Sensitive data should be encrypted in transit and at rest using strong algorithms.
> 

[Poll:1055: Which practical scenario tool is commonly used for network scanning during reconnaissance? ]
- SQL Injection
* Nmap
- Secure Cookies
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Nmap**
> Nmap is widely used for network discovery and scanning.
> 

[Poll:1056: Which attack causes a logged-in user's browser to perform unwanted actions without their consent? ]
- XSS
* Cross-Site Request Forgery (CSRF)
- SSRF
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> CSRF tricks authenticated users' browsers into submitting requests using their credentials.
> 

[Poll:1057: What helps detect suspicious activity early? ]
- SSL Certificate Expiry
* Output encoding and Content Security Policy (CSP)
- XSS
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Centralized logging with alerting**
> Collecting logs centrally and setting alerts enables faster detection and response.
> 

[Poll:1058: What defense helps prevent reflected XSS by ensuring output is safe for HTML context?]
- SQL Injection
* Output encoding / escaping
- Insecure Design
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Output encoding / escaping**
> Properly encoding untrusted data before placing it into HTML prevents script injection.
> 
[Poll:1059: Which of the following best describes: Which issue allows attackers to impersonate users due to weak authentication controls? ]
- Broken Authentication
- Insecure Deserialization
* CSRF
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak session management or credential handling can enable account takeover.
> 
[Poll:1060: Which practice helps avoid SQL injection by separating code from user data? ]
* Use of parameterized/prepared statements
- Broken Authentication
- Insecure Deserialization
- Cross-Site Scripting (XSS)
> Explanation:
> ✅ Correct Answer: **Use of parameterized/prepared statements**
> Prepared statements separate code and data, avoiding injection.
> 
[Poll:1061: Which practical scenario header tells browsers not to allow a page in a frame to protect against clickjacking? ]
- Input Validation
* SQL Prepared Statements
- X-Frame-Options
- Using Frameworks
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> X-Frame-Options or CSP frame-ancestors stop framing by other sites.
> 
[Poll:1062: Which practical scenario issue involves inadequate protection of data at rest or in transit? ]
- Cross-Site Scripting (XSS)
- SSRF
- Clickjacking
* Encrypt sensitive data at rest and in transit; secure key management
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Sensitive data should be encrypted in transit and at rest using strong algorithms.
> 

[Poll:1063: Which practical scenario of the following best describes: Which practical scenario issue allows attackers to impersonate users due to weak authentication controls?]
- Insecure Deserialization
- Directory Traversal
- Broken Authentication
* CSRF
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak session management or credential handling can enable account takeover.
> 
[Poll:1064: Which practical scenario of the following best describes: What is a simple mitigation for security misconfiguration issues? ]
- SQL Injection
- Harden default configurations and remove unused services
- Weak Passwords
* CSRF
> Explanation:
> ✅ Correct Answer: **Harden default configurations and remove unused services**
> Reducing attack surface by removing default accounts and services prevents many misconfigurations.
> 
[Poll:1065: Which vulnerability lets users perform actions they are not authorized to do? ]
- Broken Authentication
- XSS
* Enforce authorization checks and use indirect references
- Misconfigured Headers
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Failure to enforce authorization server-side allows privilege escalation or data leakage.
> 

[Poll:1066: Which practical scenario header helps browsers avoid insecure downgrades and ensure HTTPS is used? ]
- Cross-Site Scripting (XSS)
- SSRF
* X-Frame-Options or Content-Security-Policy `frame-ancestors`
- Clickjacking
> Explanation:
> ✅ Correct Answer: **HSTS (Strict-Transport-Security)**
> HSTS instructs browsers to always use HTTPS for a domain, preventing certain downgrade attacks.
> 

[Poll:1067: Which practical scenario algorithm is unsuitable for password hashing due to speed? ]
- SQL Injection
- XSS
* MD5
- XSS
> Explanation:
> ✅ Correct Answer: **MD5**
> Fast hash functions (like MD5) are unsuitable for passwords; use slow memory-hard hashes.
> 

[Poll:1068: Which vulnerability allows attackers to read arbitrary files by manipulating file paths? ]
- SQL Injection
- CSRF
* Directory Traversal
- XSS
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Using ../ sequences without validation can let attackers access files outside intended directories.
> 

[Poll:1069: Why is using outdated libraries dangerous for applications? ]
- XSS
- Buffer Overflow
- Broken Access Control
* Output encoding and Content Security Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated components may have public CVEs attackers can exploit.
> 

[Poll:1070: Which practical scenario cookie attribute helps reduce CSRF by preventing cookies on cross-site requests? ]
* CSP
- HSTS
- Server-Side Validation
- SameSite
> Explanation:
> ✅ Correct Answer: **SameSite**
> SameSite=strict or lax restricts cookie sending on cross-site contexts.
> 
[Poll:1071: Which header helps browsers avoid insecure downgrades and ensure HTTPS is used? ]
- SSRF
- Clickjacking
* X-Frame-Options or Content-Security-Policy `frame-ancestors`
- Cross-Site Scripting (XSS)
> Explanation:
> ✅ Correct Answer: **HSTS (Strict-Transport-Security)**
> HSTS instructs browsers to always use HTTPS for a domain, preventing certain downgrade attacks.
> 

[Poll:1072: Which vulnerability allows attackers to inject client-side scripts into web pages viewed by other users? ]
- Insecure Design
- SQL Injection
- Broken Access Control
* Output encoding and Content Security Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> XSS lets attackers execute scripts in victims' browsers, often due to insufficient output encoding.
> 

[Poll:1073: Which control prevents framing attacks like clickjacking? ]
* X-Frame-Options or CSP frame-ancestors
- Weak Passwords
- XSS
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **X-Frame-Options or CSP frame-ancestors**
> These headers prevent a page being framed by other origins.
> 
[Poll:1074: Which practical scenario mitigation reduces risk of SQL injection by separating code from data? ]
- Cross-Site Scripting (XSS)
- Insecure Deserialization
* Use of parameterized/prepared statements
- Broken Authentication
> Explanation:
> ✅ Correct Answer: **Use of parameterized/prepared statements**
> Prepared statements (parameterized queries) prevent user data from being executed as SQL commands.
> 
[Poll:1075: Which of the following best describes: Which attack uses leaked username/password pairs to break into accounts on other services? ]
- SSRF
* Use multi-factor authentication (MFA) and rate limiting
- Phishing
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Attackers replay breached credentials across sites; rate-limiting and MFA help mitigate it.
> 

[Poll:1076: Which practical scenario vulnerability allows attackers to read arbitrary files by manipulating file paths? ]
- XSS
- SQL Injection
- CSRF
* Directory Traversal
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Using ../ sequences without validation can let attackers access files outside intended directories.
> 

[Poll:1077: Which practical scenario problem occurs when TLS is misconfigured allowing insecure connections? ]
- SQL Injection
- Weak Passwords
* TLS / Certificate issues
- XSS
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can lead to insecure connections or trust errors.
> 

[Poll:1078: Which of the following best describes: What is a safe approach to mitigate SSRF? ]
- XSS
* Whitelist outbound URLs and validate input
- Brute Force
- CSRF
> Explanation:
> ✅ Correct Answer: **Whitelist outbound URLs and validate input**
> Restricting allowed destinations and validating input reduces SSRF risk.
> 
[Poll:1079: Which practical scenario issue allows attackers to impersonate users due to weak authentication controls?]
- Insecure Deserialization
* CSRF
- Directory Traversal
- Broken Authentication
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak session management or credential handling can enable account takeover.
> 
[Poll:1080: Which practical scenario function is recommended for password hashing due to memory-hard properties? ]
- SSL/TLS
* Argon2
- Plaintext Storage
- CSP
> Explanation:
> ✅ Correct Answer: **Argon2**
> Argon2 is a modern memory-hard hash designed for password storage.
> 

[Poll:1081: Which of the following best describes: What defense helps prevent reflected XSS by ensuring output is safe for HTML context? ]
- Broken Access Control
* Output encoding / escaping
- Insecure Design
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Output encoding / escaping**
> Properly encoding untrusted data before placing it into HTML prevents script injection.
> 
[Poll:1082: Which practical scenario of the following best describes: Which practical scenario header can help mitigate XSS by restricting sources of scripts? ]
- HSTS
* Content-Security-Policy (CSP)
- SQL Prepared Statements
- Secure Cookies
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP limits permitted script sources, reducing XSS impact.
> 
[Poll:1083: Which practical scenario practice reduces risk from third-party dependencies? ]
- Buffer Overflow
- Broken Access Control
- XSS
* Output encoding and Content Security Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Regular dependency updates and vulnerability scanning**
> Patch and scan dependencies to reduce known-vulnerability exposure.
> 

[Poll:1084: What helps manage risks from dependencies? ]
* Output encoding and Content Security Policy (CSP)
- Buffer Overflow
- XSS
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Regular dependency updates and vulnerability scanning**
> Automated scanning and timely patching reduce exploitation risk.
> 

[Poll:1085: Which vulnerability allows remote code execution via malicious serialized objects? ]
- SQL Injection
- Cross-Site Scripting (XSS)
- Buffer Overflow
* Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Attackers can send crafted serialized data that the server unserializes leading to code execution or logic manipulation.
> 

[Poll:1086: Which practical scenario of the following best describes: Which practical scenario problem occurs when TLS is misconfigured allowing insecure connections? ]
- XSS
* TLS / Certificate issues
- Weak Passwords
- SQL Injection
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can lead to insecure connections or trust errors.
> 

[Poll:1087: Which algorithm is unsuitable for password hashing due to speed? ]
- CSRF
- XSS
* MD5
- XSS
> Explanation:
> ✅ Correct Answer: **MD5**
> Fast hash functions (like MD5) are unsuitable for passwords; use slow memory-hard hashes.
> 

[Poll:1088: Which of the following best describes: Which cookie attribute helps reduce CSRF by preventing cookies on cross-site requests? ]
* CSP
- HSTS
- Server-Side Validation
- SameSite
> Explanation:
> ✅ Correct Answer: **SameSite**
> SameSite=strict or lax restricts cookie sending on cross-site contexts.
> 
[Poll:1089: Which practical scenario of the following best describes: What is a safe approach to mitigate SSRF?]
* CSRF
- Brute Force
- XSS
- Whitelist outbound URLs and validate input
> Explanation:
> ✅ Correct Answer: **Whitelist outbound URLs and validate input**
> Restricting allowed destinations and validating input reduces SSRF risk.
> 
[Poll:1090: Which practical scenario of the following best describes: Which practical scenario control helps prevent brute-force and abuse by limiting request rates? ]
* Rate limiting / Throttling
- XSS
- CSRF
- Encryption
> Explanation:
> ✅ Correct Answer: **Rate limiting / Throttling**
> Enforcing limits per IP or account reduces automated abuse.
> 
[Poll:1091: Which of the following best describes: Which practice is insecure for password storage? ]
- SSL/TLS
* Storing passwords in plaintext
- CSP
- Plaintext Storage
> Explanation:
> ✅ Correct Answer: **Storing passwords in plaintext**
> Plaintext storage exposes user credentials if breached.
> 

[Poll:1092: Which class of bugs is caused by default credentials, verbose errors, or open cloud storage? ]
- SQL Injection
- Weak Passwords
- CSRF
* Security Misconfiguration
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Misconfiguration includes insecure defaults, exposed admin interfaces, and overly permissive services.
> 

[Poll:1093: Which practice reduces risk from third-party dependencies? ]
- Broken Access Control
- XSS
* Output encoding and Content Security Policy (CSP)
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Regular dependency updates and vulnerability scanning**
> Patch and scan dependencies to reduce known-vulnerability exposure.
> 

[Poll:1094: Which practical scenario of the following best describes: Which practical scenario cookie attribute helps reduce CSRF by preventing cookies on cross-site requests? ]
* CSP
- HSTS
- SameSite
- Server-Side Validation
> Explanation:
> ✅ Correct Answer: **SameSite**
> SameSite=strict or lax restricts cookie sending on cross-site contexts.
> 
[Poll:1095: Which practical scenario header helps prevent MIME sniffing by browsers? ]
- SQL Prepared Statements
* X-Content-Type-Options: nosniff
- HSTS
- HSTS
> Explanation:
> ✅ Correct Answer: **X-Content-Type-Options: nosniff**
> This header prevents browsers from guessing content types, stopping some attacks.
> 

[Poll:1096: Which practical scenario vulnerability allows remote code execution via malicious serialized objects?]
- Cross-Site Scripting (XSS)
- SQL Injection
- Buffer Overflow
* Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Attackers can send crafted serialized data that the server unserializes leading to code execution or logic manipulation.
> 

[Poll:1097: Which of the following best describes: Which practice helps prevent credential stuffing? ]
- Multi-factor authentication (MFA)
* CSRF
- Insecure Deserialization
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Multi-factor authentication (MFA)**
> MFA adds a second factor making credential reuse less effective.
> 
[Poll:1098: Which practical scenario attack tricks users into clicking hidden UI elements by overlaying frames? ]
- Broken Access Control
- Clickjacking
- XSS
* CSRF
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> X-Frame-Options or CSP frame-ancestors can prevent framing of sensitive pages.
> 
[Poll:1099: Which of the following best describes: Which header can help mitigate XSS by restricting sources of scripts? ]
- HSTS
* SQL Prepared Statements
- Secure Cookies
- Content-Security-Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP limits permitted script sources, reducing XSS impact.
> 
[Poll:1100: Which mitigation reduces risk of SQL injection by separating code from data? ]
- Broken Authentication
- Insecure Deserialization
- Cross-Site Scripting (XSS)
* Use of parameterized/prepared statements
> Explanation:
> ✅ Correct Answer: **Use of parameterized/prepared statements**
> Prepared statements (parameterized queries) prevent user data from being executed as SQL commands.
> 
[Poll:1101: Which of the following best describes: Which problem makes it hard to detect breaches and respond in time? ]
- XSS
- SQL Injection
- SSL Certificate Expiry
* Insufficient Logging and Monitoring
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Without logs and alerts, security incidents may go unnoticed for longer.
> 

[Poll:1102: Which practical scenario vulnerability lets an attacker make the server perform unintended network requests?]
- CSRF
- XSS
* Server-Side Request Forgery (SSRF)
- Brute Force
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> SSRF abuses server-side URL fetch features to access internal resources.
> 

[Poll:1103: Which of the following best describes: What is a common risk of insecure deserialization in web applications? ]
- Buffer Overflow
- SQL Injection
* Insecure Deserialization
- Cross-Site Scripting (XSS)
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be turned into dangerous objects when deserialized on the server.
> 

[Poll:1104: What is a common risk of insecure deserialization in web applications? ]
* Insecure Deserialization
- Cross-Site Scripting (XSS)
- Buffer Overflow
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be turned into dangerous objects when deserialized on the server.
> 

[Poll:1105: Which of the following best describes: Which header tells browsers not to allow a page in a frame to protect against clickjacking? ]
- Input Validation
* SQL Prepared Statements
- Using Frameworks
- X-Frame-Options
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> X-Frame-Options or CSP frame-ancestors stop framing by other sites.
> 
[Poll:1106: Which practical scenario of the following best describes: Which practical scenario issue involves inadequate protection of data at rest or in transit? ]
- Clickjacking
* Encrypt sensitive data at rest and in transit; secure key management
- Cross-Site Scripting (XSS)
- SSRF
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Sensitive data should be encrypted in transit and at rest using strong algorithms.
> 

[Poll:1107: Which attack uses leaked username/password pairs to break into accounts on other services? ]
- SQL Injection
- SSRF
* Use multi-factor authentication (MFA) and rate limiting
- Phishing
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Attackers replay breached credentials across sites; rate-limiting and MFA help mitigate it.
> 

[Poll:1108: Which of the following best describes: Which attack manipulates SQL queries to access or modify the database without authorization? ]
- Cross-Site Scripting (XSS)
* Use prepared statements / parameterized queries
- Broken Authentication
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> User input injected into SQL queries can change query logic; parameterized queries mitigate this.
> 

[Poll:1109: Which practical scenario of the following best describes: Which practical scenario vulnerability allows remote code execution via malicious serialized objects?]
- Cross-Site Scripting (XSS)
- Buffer Overflow
* Insecure Deserialization
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Attackers can send crafted serialized data that the server unserializes leading to code execution or logic manipulation.
> 

[Poll:1110: Which issue allows attackers to impersonate users due to weak authentication controls? ]
* CSRF
- Broken Authentication
- Directory Traversal
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak session management or credential handling can enable account takeover.
> 
[Poll:1111: Which practical scenario of the following best describes: Which practical scenario attack uses leaked username/password pairs to break into accounts on other services? ]
- SQL Injection
* Use multi-factor authentication (MFA) and rate limiting
- SSRF
- Phishing
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Attackers replay breached credentials across sites; rate-limiting and MFA help mitigate it.
> 

[Poll:1112: Which of the following best describes: Which problem occurs when TLS is misconfigured allowing insecure connections? ]
- SQL Injection
- Weak Passwords
- XSS
* TLS / Certificate issues
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can lead to insecure connections or trust errors.
> 

[Poll:1113: Which practical scenario of the following best describes: Which practical scenario header tells browsers not to allow a page in a frame to protect against clickjacking? ]
- Input Validation
* SQL Prepared Statements
- Using Frameworks
- X-Frame-Options
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> X-Frame-Options or CSP frame-ancestors stop framing by other sites.
> 
[Poll:1114: Which header helps prevent MIME sniffing by browsers? ]
- Cross-Site Scripting (XSS)
- SQL Injection
* Output encoding and Content Security Policy (CSP)
- SQL Injection
> Explanation:
> ✅ Correct Answer: **X-Content-Type-Options: nosniff**
> This header prevents browsers from guessing content types, stopping some attacks.
> 

[Poll:1115: Which of the following best describes: Which vulnerability allows attackers to inject client-side scripts into web pages viewed by other users? ]
* Output encoding and Content Security Policy (CSP)
- Broken Access Control
- Insecure Design
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> XSS lets attackers execute scripts in victims' browsers, often due to insufficient output encoding.
> 

[Poll:1116: Which practical scenario attack uses leaked username/password pairs to break into accounts on other services?]
- SSRF
- Phishing
- SQL Injection
* Use multi-factor authentication (MFA) and rate limiting
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Attackers replay breached credentials across sites; rate-limiting and MFA help mitigate it.
> 

[Poll:1117: Which attack manipulates SQL queries to access or modify the database without authorization? ]
- Insecure Deserialization
- Cross-Site Scripting (XSS)
* Use prepared statements / parameterized queries
- Broken Authentication
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> User input injected into SQL queries can change query logic; parameterized queries mitigate this.
> 

[Poll:1118: Which practical scenario of the following best describes: What defense helps prevent reflected XSS by ensuring output is safe for HTML context?]
- SQL Injection
* Output encoding / escaping
- Insecure Design
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Output encoding / escaping**
> Properly encoding untrusted data before placing it into HTML prevents script injection.
> 
[Poll:1119: Which practical scenario of the following best describes: Which practical scenario vulnerability allows attackers to inject client-side scripts into web pages viewed by other users? ]
- Broken Access Control
- Insecure Design
* Output encoding and Content Security Policy (CSP)
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> XSS lets attackers execute scripts in victims' browsers, often due to insufficient output encoding.
> 

[Poll:1120: In web security, what does Broken Access Control when user input is not validated usually refer to? ]
- Insecure Design
- XSS
- Broken Authentication
* Enforce authorization checks and use indirect references
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1121: What is a common mitigation for Insecure Deserialization? ]
* Validate/whitelist serialized types or avoid deserializing untrusted data
- Directory Traversal
- SQL Injection
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1122: Which issue allows attackers to exploit Password hashing in backend servers? ]
- CSP
- SSL/TLS
- MD5
* Argon2
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1123: In web security, what does Cross-Site Scripting (XSS) usually refer to? ]
- Buffer Overflow
- Broken Access Control
* Output encoding and Content Security Policy (CSP)
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1124: What is a common mitigation for Insufficient Logging & Monitoring in modern web apps? ]
- Insecure Design
* Use multi-factor authentication (MFA) and rate limiting
- Buffer Overflow
- Credential Stuffing
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1125: Which issue allows attackers to exploit TLS / Certificate issues in single-page applications? ]
- SQL Injection
* TLS / Certificate issues
- Misconfiguration
- Weak Passwords
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1126: Which of the following best matches: Security Misconfiguration in microservices? ]
- Insecure Deserialization
- Weak Passwords
* Security Misconfiguration
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1127: Which control helps mitigate Clickjacking in HTTP-based services? ]
- Broken Access Control
- Clickjacking
- Insecure Deserialization
* CSRF
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 
[Poll:1128: Which issue allows attackers to exploit SameSite cookie in HTTP-based services? ]
- Server-Side Validation
* SameSite
- X-Frame-Options
- CSP
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1129: Which vulnerability is described by: Insecure Deserialization in single-page applications? ]
- Buffer Overflow
* Insecure Deserialization
- SQL Injection
- Cross-Site Scripting (XSS)
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1130: Which of the following best matches: Credential Stuffing for public web APIs? ]
- Phishing
* Use multi-factor authentication (MFA) and rate limiting
- SSRF
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1131: What is a common mitigation for SameSite cookie in backend servers? ]
- HSTS
- X-Frame-Options
* SameSite
- CSP
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1132: Identify the vulnerability: Cross-Site Request Forgery (CSRF) in single-page applications. ]
- XSS
- SSRF
- SQL Injection
* Cross-Site Request Forgery (CSRF)
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 

[Poll:1133: Which vulnerability category covers TLS / Certificate issues in single-page applications? ]
- Weak Passwords
- SQL Injection
- Misconfiguration
* TLS / Certificate issues
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1134: What is a common mitigation for Security Misconfiguration for public web APIs? ]
- Insecure Deserialization
- Security Misconfiguration
- SQL Injection
* CSRF
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 
[Poll:1135: What is the primary risk associated with Broken Authentication in HTTP-based services? ]
* Broken Authentication
- CSRF
- Insecure Deserialization
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1136: What is the primary risk associated with Content Security Policy (CSP) in web applications? ]
- Secure Cookies
* Content-Security-Policy (CSP)
- SQL Prepared Statements
- SameSite
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1137: Which of these is an example of Content Security Policy (CSP) in modern web apps? ]
- SameSite
* SQL Prepared Statements
- HSTS
- Content-Security-Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1138: Which control helps mitigate Insecure Deserialization in web applications? ]
- Directory Traversal
* Validate/whitelist serialized types or avoid deserializing untrusted data
- Cross-Site Scripting (XSS)
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1139: Which of the following best matches: SQL Injection in backend servers? ]
* Use prepared statements / parameterized queries
- Insecure Deserialization
- Broken Authentication
- Cross-Site Scripting (XSS)
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1140: As a multiple-choice question, Which issue allows attackers to exploit Insecure Deserialization in microservices? ]
- Buffer Overflow
- Cross-Site Scripting (XSS)
- SQL Injection
* Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1141: Which issue allows attackers to exploit Sensitive Data Exposure in modern web apps? ]
* Encrypt sensitive data at rest and in transit; secure key management
- Broken Access Control
- Cross-Site Scripting (XSS)
- SSRF
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1142: Which vulnerability could lead to Broken Access Control in single-page applications in an application? ]
- Insecure Design
- Misconfigured Headers
* Enforce authorization checks and use indirect references
- XSS
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1143: What is a common mitigation for Directory Traversal in backend servers? ]
- SQL Injection
- XSS
* CSRF
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 
[Poll:1144: For an app security quiz, What is the primary risk associated with Sensitive Data Exposure in microservices? ]
- Broken Access Control
- SSRF
* Encrypt sensitive data at rest and in transit; secure key management
- Clickjacking
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1145: In web security, what does Credential Stuffing in web applications usually refer to? ]
- Broken Authentication
- SSRF
* Use multi-factor authentication (MFA) and rate limiting
- Phishing
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1146: What is a common mitigation for Sensitive Data Exposure in single-page applications? ]
- Cross-Site Scripting (XSS)
* Encrypt sensitive data at rest and in transit; secure key management
- Clickjacking
- SSRF
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1147: In a secure dev context, What is the primary risk associated with Cross-Site Scripting (XSS) when user input is not validated? ]
- Broken Access Control
- Insecure Design
* Output encoding and Content Security Policy (CSP)
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1148: Which issue allows attackers to exploit Broken Authentication in microservices? ]
* Broken Authentication
- CSRF
- Credential Stuffing
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1149: For an app security quiz, Which of these is an example of Using Components with Known Vulnerabilities in single-page applications? ]
- SQL Injection
- XSS
- Buffer Overflow
* Using Components with Known Vulnerabilities
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1150: Which of the following best matches: Rate Limiting / Throttling? ]
- Encryption
- XSS
* Rate Limiting / Throttling
- CSRF
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1151: Which control helps mitigate Broken Authentication in web applications? ]
- Broken Authentication
- Credential Stuffing
* CSRF
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 
[Poll:1152: Which vulnerability is described by: Broken Access Control in backend servers? ]
* Enforce authorization checks and use indirect references
- Insecure Design
- XSS
- Misconfigured Headers
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1153: What is the primary risk associated with Cross-Site Scripting (XSS) when user input is not validated? ]
* Output encoding and Content Security Policy (CSP)
- Insecure Design
- Buffer Overflow
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1154: Which of these is an example of Directory Traversal in backend servers? ]
- XSS
- CSRF
* Directory Traversal
- Misconfiguration
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1155: During threat modeling, What is a common mitigation for Cross-Site Scripting (XSS) in modern web apps? ]
* Output encoding and Content Security Policy (CSP)
- Insecure Design
- Broken Access Control
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1156: Identify the vulnerability: SameSite cookie in web applications. ]
* SameSite
- X-Frame-Options
- Server-Side Validation
- HSTS
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1157: For an app security quiz, In web security, what does Rate Limiting / Throttling for public web APIs usually refer to? ]
* Rate Limiting / Throttling
- XSS
- CSRF
- HSTS
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1158: When auditing an API, Which of the following best matches: Password hashing in modern web apps? ]
- SSL/TLS
- MD5
* Argon2
- Plaintext Storage
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1159: As a multiple-choice question, Which control helps mitigate Clickjacking in modern web apps? ]
- Clickjacking
- Insecure Deserialization
- XSS
* CSRF
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 
[Poll:1160: As a multiple-choice question, Which problem involves Security Misconfiguration when user input is not validated? ]
- CSRF
* Security Misconfiguration
- Insecure Deserialization
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1161: When auditing an API, What is the primary risk associated with Content Security Policy (CSP) in web applications? ]
- Secure Cookies
- HSTS
* Content-Security-Policy (CSP)
- SQL Prepared Statements
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1162: What is the primary risk associated with Sensitive Data Exposure for public web APIs? ]
- Broken Access Control
- Cross-Site Scripting (XSS)
- Clickjacking
* Encrypt sensitive data at rest and in transit; secure key management
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1163: Which vulnerability category covers Server-Side Request Forgery (SSRF)? ]
- XSS
- CSRF
* Server-Side Request Forgery (SSRF)
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1164: As a multiple-choice question, Which vulnerability category covers Rate Limiting / Throttling for public web APIs? ]
- HSTS
- Encryption
* CSRF
- Rate Limiting / Throttling
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1165: As a multiple-choice question, Which vulnerability is described by: Clickjacking in modern web apps? ]
- Broken Access Control
- Clickjacking
- XSS
* CSRF
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 
[Poll:1166: Which issue allows attackers to exploit Clickjacking in microservices? ]
- Broken Access Control
- Insecure Deserialization
- XSS
* X-Frame-Options or Content-Security-Policy `frame-ancestors`
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 

[Poll:1167: Which control helps mitigate Security Misconfiguration in HTTP-based services? ]
* CSRF
- Weak Passwords
- Insecure Deserialization
- Security Misconfiguration
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 
[Poll:1168: Which control helps mitigate SameSite cookie for public web APIs? ]
* SameSite
- X-Frame-Options
- HSTS
- Server-Side Validation
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1169: Which control helps mitigate SQL Injection when user input is not validated? ]
- Cross-Site Scripting (XSS)
- Clickjacking
* Use prepared statements / parameterized queries
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1170: Which problem involves SameSite cookie in modern web apps? ]
- Server-Side Validation
- X-Frame-Options
- CSP
* SameSite
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1171: When auditing an API, In web security, what does Content Security Policy (CSP) usually refer to? ]
- Secure Cookies
- SameSite
* SQL Prepared Statements
- Content-Security-Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1172: Which problem involves Content Security Policy (CSP) in backend servers? ]
- SameSite
* Content-Security-Policy (CSP)
- HSTS
- Secure Cookies
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1173: Which of these is an example of Password hashing in HTTP-based services? ]
- CSP
* Argon2
- Plaintext Storage
- MD5
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1174: When auditing an API, What is the primary risk associated with Directory Traversal in backend servers? ]
- Misconfiguration
- SQL Injection
* Directory Traversal
- XSS
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1175: Which problem involves Credential Stuffing when user input is not validated? ]
- Broken Authentication
- Phishing
- SQL Injection
* Use multi-factor authentication (MFA) and rate limiting
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1176: Which problem involves SQL Injection? ]
- Broken Authentication
- Insecure Deserialization
- Clickjacking
* Use prepared statements / parameterized queries
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1177: Which vulnerability category covers Security Misconfiguration? ]
- SQL Injection
- CSRF
* Security Misconfiguration
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1178: As a multiple-choice question, Which problem involves SameSite cookie in web applications? ]
* SameSite
- X-Frame-Options
- HSTS
- Server-Side Validation
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1179: What is a common mitigation for Password hashing in single-page applications? ]
* Argon2
- SSL/TLS
- CSP
- Plaintext Storage
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1180: What is a common mitigation for SQL Injection in microservices? ]
- Broken Authentication
* Use prepared statements / parameterized queries
- Cross-Site Scripting (XSS)
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1181: During threat modeling, What is a common mitigation for Security Misconfiguration in microservices? ]
- Insecure Deserialization
- SQL Injection
- Weak Passwords
* Validate/whitelist serialized types or avoid deserializing untrusted data
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1182: Which of these is an example of Cross-Site Request Forgery (CSRF) in modern web apps? ]
- XSS
* Cross-Site Request Forgery (CSRF)
- Clickjacking
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 

[Poll:1183: When auditing an API, Which of the following best matches: Insecure Deserialization in web applications? ]
- Cross-Site Scripting (XSS)
- SQL Injection
* Insecure Deserialization
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1184: Which vulnerability is described by: SQL Injection in HTTP-based services? ]
- Clickjacking
- Cross-Site Scripting (XSS)
* Use prepared statements / parameterized queries
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1185: Which vulnerability could lead to Password hashing in backend servers in an application? ]
- Plaintext Storage
- SSL/TLS
* Argon2
- CSP
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1186: Which vulnerability could lead to Cross-Site Scripting (XSS) in web applications in an application? ]
- SQL Injection
* Output encoding and Content Security Policy (CSP)
- Buffer Overflow
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1187: Which problem involves Using Components with Known Vulnerabilities for public web APIs? ]
* Output encoding and Content Security Policy (CSP)
- SQL Injection
- XSS
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1188: What is a common mitigation for Server-Side Request Forgery (SSRF) in single-page applications? ]
- Brute Force
- Directory Traversal
- XSS
* Validate and restrict server-side URL fetches; use an allowlist of hosts
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1189: What is a common mitigation for Broken Access Control in web applications? ]
- Broken Authentication
- Insecure Design
* Enforce authorization checks and use indirect references
- XSS
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1190: What is the primary risk associated with Server-Side Request Forgery (SSRF) when user input is not validated? ]
- Brute Force
* Server-Side Request Forgery (SSRF)
- XSS
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1191: Which issue allows attackers to exploit Broken Authentication when user input is not validated? ]
* Broken Authentication
- Insecure Deserialization
- CSRF
- Credential Stuffing
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1192: Identify the vulnerability: SQL Injection. ]
* Use prepared statements / parameterized queries
- Cross-Site Scripting (XSS)
- Clickjacking
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1193: In web security, what does Insufficient Logging & Monitoring in microservices usually refer to? ]
* Insufficient Logging and Monitoring
- Insecure Design
- Credential Stuffing
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1194: In web security, what does Insecure Deserialization in HTTP-based services usually refer to? ]
* Insecure Deserialization
- SQL Injection
- Directory Traversal
- Cross-Site Scripting (XSS)
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1195: Which vulnerability is described by: Insecure Deserialization in microservices? ]
- Directory Traversal
- Buffer Overflow
- Cross-Site Scripting (XSS)
* Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1196: Which problem involves SameSite cookie in single-page applications? ]
- HSTS
- Server-Side Validation
* SameSite
- CSP
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1197: During threat modeling, Which vulnerability category covers Clickjacking for public web APIs? ]
- Insecure Deserialization
- Broken Access Control
- Clickjacking
* CSRF
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 
[Poll:1198: Identify the vulnerability: Cross-Site Request Forgery (CSRF). ]
- Clickjacking
* Cross-Site Request Forgery (CSRF)
- XSS
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 

[Poll:1199: Which of these is an example of Insufficient Logging & Monitoring in HTTP-based services? ]
- Credential Stuffing
- Buffer Overflow
* Insufficient Logging and Monitoring
- Insecure Design
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1200: Which control helps mitigate Content Security Policy (CSP) in modern web apps? ]
- SameSite
* Content-Security-Policy (CSP)
- HSTS
- SQL Prepared Statements
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1201: Which issue allows attackers to exploit Clickjacking in single-page applications? ]
* Clickjacking
- CSRF
- XSS
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 

[Poll:1202: In web security, what does Cross-Site Scripting (XSS) in single-page applications usually refer to? ]
* Output encoding and Content Security Policy (CSP)
- Buffer Overflow
- Insecure Design
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1203: Which of the following best matches: Insufficient Logging & Monitoring? ]
- Buffer Overflow
- Credential Stuffing
* Insufficient Logging and Monitoring
- Insecure Design
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1204: As a multiple-choice question, Which problem involves Broken Access Control for public web APIs? ]
- Misconfigured Headers
- Broken Authentication
- XSS
* Enforce authorization checks and use indirect references
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1205: Which problem involves Clickjacking? ]
- Broken Access Control
- XSS
* CSRF
- Clickjacking
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 
[Poll:1206: What is a common mitigation for Clickjacking in single-page applications? ]
- Clickjacking
* CSRF
- Insecure Deserialization
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 
[Poll:1207: Which control helps mitigate Rate Limiting / Throttling when user input is not validated? ]
- XSS
* Rate Limiting / Throttling
- HSTS
- Encryption
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1208: Which vulnerability category covers Using Components with Known Vulnerabilities in web applications? ]
- SQL Injection
* Using Components with Known Vulnerabilities
- XSS
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1209: Which problem involves HTTP security headers for public web APIs? ]
* X-Frame-Options
- SQL Prepared Statements
- Using Frameworks
- Rate Limiting
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1210: In web security, what does TLS / Certificate issues usually refer to? ]
- Weak Passwords
- XSS
- Misconfiguration
* TLS / Certificate issues
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1211: Which vulnerability could lead to Rate Limiting / Throttling when user input is not validated in an application? ]
* CSRF
- XSS
- Rate Limiting / Throttling
- HSTS
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1212: In web security, what does Broken Access Control for public web APIs usually refer to? ]
- Broken Authentication
* Enforce authorization checks and use indirect references
- XSS
- Insecure Design
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1213: Which of these is an example of Cross-Site Scripting (XSS) in web applications? ]
- Buffer Overflow
- Broken Access Control
- Insecure Design
* Output encoding and Content Security Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1214: During threat modeling, Which of these is an example of Insecure Deserialization in modern web apps? ]
* Insecure Deserialization
- Directory Traversal
- Cross-Site Scripting (XSS)
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1215: In web security, what does Insecure Deserialization in modern web apps usually refer to? ]
- Cross-Site Scripting (XSS)
- Directory Traversal
- Buffer Overflow
* Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1216: Identify the vulnerability: Password hashing when user input is not validated. ]
- SSL/TLS
- CSP
* Argon2
- Plaintext Storage
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1217: For an app security quiz, In web security, what does Insecure Deserialization in microservices usually refer to? ]
- Buffer Overflow
- Directory Traversal
* Insecure Deserialization
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1218: In web security, what does Cross-Site Request Forgery (CSRF) when user input is not validated usually refer to? ]
- SQL Injection
* Cross-Site Request Forgery (CSRF)
- SSRF
- Clickjacking
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 

[Poll:1219: Identify the vulnerability: Credential Stuffing in HTTP-based services. ]
* Use multi-factor authentication (MFA) and rate limiting
- Phishing
- SSRF
- Broken Authentication
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1220: What is the primary risk associated with Insufficient Logging & Monitoring when user input is not validated? ]
* Insufficient Logging and Monitoring
- Insecure Design
- Credential Stuffing
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1221: Which issue allows attackers to exploit HTTP security headers when user input is not validated? ]
- Using Frameworks
* X-Frame-Options
- Rate Limiting
- SQL Prepared Statements
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1222: Which vulnerability could lead to Content Security Policy (CSP) when user input is not validated in an application? ]
- SameSite
- HSTS
- Secure Cookies
* Content-Security-Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1223: In web security, what does HTTP security headers in microservices usually refer to? ]
- Input Validation
- Using Frameworks
* X-Frame-Options
- SQL Prepared Statements
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1224: Which vulnerability category covers HTTP security headers? ]
* X-Frame-Options
- SQL Prepared Statements
- Rate Limiting
- Input Validation
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1225: As a multiple-choice question, What is a common mitigation for SameSite cookie for public web APIs? ]
- HSTS
* SameSite
- X-Frame-Options
- Server-Side Validation
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1226: Identify the vulnerability: Server-Side Request Forgery (SSRF) when user input is not validated. ]
- Brute Force
* Server-Side Request Forgery (SSRF)
- Directory Traversal
- CSRF
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1227: Which vulnerability category covers SameSite cookie in microservices? ]
- Server-Side Validation
* SameSite
- HSTS
- X-Frame-Options
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1228: Which vulnerability could lead to SameSite cookie for public web APIs in an application? ]
- CSP
- X-Frame-Options
* SameSite
- HSTS
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1229: What is the primary risk associated with TLS / Certificate issues in web applications? ]
- XSS
- Misconfiguration
* TLS / Certificate issues
- SQL Injection
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1230: Which vulnerability could lead to Server-Side Request Forgery (SSRF) in HTTP-based services in an application? ]
- CSRF
- XSS
- Brute Force
* Server-Side Request Forgery (SSRF)
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1231: Which vulnerability is described by: Broken Authentication when user input is not validated? ]
* Broken Authentication
- Credential Stuffing
- Insecure Deserialization
- CSRF
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1232: Identify the vulnerability: HTTP security headers. ]
- Rate Limiting
- Input Validation
- Using Frameworks
* X-Frame-Options
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1233: For an app security quiz, Which vulnerability is described by: Cross-Site Scripting (XSS) in web applications? ]
- SQL Injection
- Insecure Design
* Output encoding and Content Security Policy (CSP)
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1234: Which vulnerability category covers Server-Side Request Forgery (SSRF) for public web APIs? ]
* Server-Side Request Forgery (SSRF)
- Directory Traversal
- XSS
- Brute Force
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1235: Which vulnerability could lead to Security Misconfiguration for public web APIs in an application? ]
- Weak Passwords
- CSRF
* Security Misconfiguration
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1236: Which problem involves Rate Limiting / Throttling in single-page applications? ]
- Encryption
* CSRF
- Rate Limiting / Throttling
- HSTS
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1237: For an app security quiz, Identify the vulnerability: Security Misconfiguration in microservices. ]
- Insecure Deserialization
* Security Misconfiguration
- CSRF
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1238: Which vulnerability is described by: Rate Limiting / Throttling in modern web apps? ]
* CSRF
- Encryption
- XSS
- Rate Limiting / Throttling
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1239: Identify the vulnerability: Broken Access Control in backend servers. ]
- Misconfigured Headers
- XSS
- Broken Authentication
* Enforce authorization checks and use indirect references
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1240: Which of these is an example of Cross-Site Scripting (XSS) when user input is not validated? ]
- SQL Injection
* Output encoding and Content Security Policy (CSP)
- Buffer Overflow
- Insecure Design
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1241: Which vulnerability category covers Server-Side Request Forgery (SSRF) in microservices? ]
- Brute Force
* Server-Side Request Forgery (SSRF)
- XSS
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1242: Which problem involves Security Misconfiguration in web applications? ]
- Insecure Deserialization
- SQL Injection
- Weak Passwords
* Security Misconfiguration
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1243: During threat modeling, Which issue allows attackers to exploit Broken Authentication in modern web apps? ]
* Broken Authentication
- CSRF
- Insecure Deserialization
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1244: Which vulnerability category covers TLS / Certificate issues in modern web apps? ]
- Misconfiguration
* TLS / Certificate issues
- Weak Passwords
- XSS
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1245: Which issue allows attackers to exploit Insecure Deserialization in HTTP-based services? ]
- Buffer Overflow
- Cross-Site Scripting (XSS)
* Insecure Deserialization
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1246: As a multiple-choice question, Which of these is an example of Cross-Site Request Forgery (CSRF) in web applications? ]
- SQL Injection
* Cross-Site Request Forgery (CSRF)
- XSS
- Clickjacking
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 

[Poll:1247: During threat modeling, Which vulnerability is described by: Server-Side Request Forgery (SSRF) in single-page applications? ]
- Directory Traversal
- XSS
- CSRF
* Server-Side Request Forgery (SSRF)
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1248: During threat modeling, Which issue allows attackers to exploit HTTP security headers for public web APIs? ]
- Using Frameworks
* X-Frame-Options
- Rate Limiting
- SQL Prepared Statements
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1249: Which control helps mitigate Content Security Policy (CSP) for public web APIs? ]
- SameSite
* Content-Security-Policy (CSP)
- SQL Prepared Statements
- Secure Cookies
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1250: What is the primary risk associated with Rate Limiting / Throttling? ]
* Rate Limiting / Throttling
- XSS
- CSRF
- Encryption
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1251: Identify the vulnerability: HTTP security headers in single-page applications. ]
- Rate Limiting
- Input Validation
- SQL Prepared Statements
* X-Frame-Options
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1252: Which vulnerability is described by: Cross-Site Scripting (XSS) in web applications? ]
- Insecure Design
- SQL Injection
* Output encoding and Content Security Policy (CSP)
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1253: During threat modeling, Which of the following best matches: Security Misconfiguration in web applications? ]
- CSRF
- SQL Injection
* Security Misconfiguration
- Weak Passwords
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1254: Which of these is an example of SameSite cookie in modern web apps? ]
- X-Frame-Options
* SameSite
- CSP
- HSTS
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1255: When auditing an API, Which vulnerability could lead to Clickjacking in web applications in an application? ]
- Broken Access Control
* CSRF
- Clickjacking
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 
[Poll:1256: Which issue allows attackers to exploit SQL Injection in modern web apps? ]
- Clickjacking
- Broken Authentication
* Use prepared statements / parameterized queries
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1257: When auditing an API, Which vulnerability category covers Directory Traversal when user input is not validated? ]
- SQL Injection
- Misconfiguration
* Directory Traversal
- CSRF
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1258: Which control helps mitigate Insufficient Logging & Monitoring in modern web apps? ]
* Use multi-factor authentication (MFA) and rate limiting
- Insecure Design
- Credential Stuffing
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1259: Which control helps mitigate Directory Traversal in modern web apps? ]
- SQL Injection
- Directory Traversal
- XSS
* CSRF
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 
[Poll:1260: Which of these is an example of Broken Authentication in microservices? ]
* Broken Authentication
- Credential Stuffing
- CSRF
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1261: What is the primary risk associated with Insufficient Logging & Monitoring in modern web apps? ]
- Insecure Design
- Buffer Overflow
* Insufficient Logging and Monitoring
- Credential Stuffing
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1262: Which issue allows attackers to exploit Password hashing? ]
* Argon2
- SSL/TLS
- Plaintext Storage
- CSP
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1263: When auditing an API, Which of these is an example of Content Security Policy (CSP)? ]
* Content-Security-Policy (CSP)
- HSTS
- Secure Cookies
- SameSite
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1264: Which vulnerability category covers Broken Authentication in web applications? ]
* Broken Authentication
- Directory Traversal
- Insecure Deserialization
- CSRF
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1265: Which vulnerability could lead to Clickjacking in microservices in an application? ]
- Clickjacking
- Broken Access Control
- Insecure Deserialization
* CSRF
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 
[Poll:1266: Which issue allows attackers to exploit Server-Side Request Forgery (SSRF) in modern web apps? ]
- XSS
- Brute Force
* Server-Side Request Forgery (SSRF)
- CSRF
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1267: Identify the vulnerability: Broken Access Control in microservices. ]
- Misconfigured Headers
- Insecure Design
- Broken Authentication
* Enforce authorization checks and use indirect references
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1268: Which vulnerability could lead to TLS / Certificate issues in backend servers in an application? ]
- Misconfiguration
- Weak Passwords
- XSS
* TLS / Certificate issues
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1269: Which vulnerability category covers SameSite cookie? ]
- HSTS
* SameSite
- CSP
- X-Frame-Options
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1270: Which issue allows attackers to exploit SameSite cookie in modern web apps? ]
- Server-Side Validation
- HSTS
- X-Frame-Options
* SameSite
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1271: In a secure dev context, Which issue allows attackers to exploit Broken Authentication in single-page applications? ]
- Directory Traversal
- Credential Stuffing
- Insecure Deserialization
* Broken Authentication
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1272: Which vulnerability is described by: Insufficient Logging & Monitoring in web applications? ]
* Insufficient Logging and Monitoring
- Buffer Overflow
- Insecure Design
- Credential Stuffing
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1273: What is the primary risk associated with Security Misconfiguration in modern web apps? ]
- SQL Injection
- Insecure Deserialization
* Security Misconfiguration
- CSRF
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1274: In web security, what does Security Misconfiguration in backend servers usually refer to? ]
- Weak Passwords
* Security Misconfiguration
- SQL Injection
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1275: Which control helps mitigate Content Security Policy (CSP) in single-page applications? ]
- SameSite
- Secure Cookies
* Content-Security-Policy (CSP)
- SQL Prepared Statements
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1276: What is the primary risk associated with Password hashing in HTTP-based services? ]
* Argon2
- SSL/TLS
- Plaintext Storage
- MD5
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1277: Which problem involves Security Misconfiguration in modern web apps? ]
- CSRF
* Security Misconfiguration
- Weak Passwords
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1278: For an app security quiz, In web security, what does Sensitive Data Exposure in backend servers usually refer to? ]
- Broken Access Control
* Encrypt sensitive data at rest and in transit; secure key management
- SSRF
- Clickjacking
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1279: Which vulnerability is described by: TLS / Certificate issues when user input is not validated? ]
* TLS / Certificate issues
- XSS
- Misconfiguration
- Weak Passwords
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1280: Which vulnerability could lead to Directory Traversal in web applications in an application? ]
- XSS
* Directory Traversal
- CSRF
- Misconfiguration
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1281: Which issue allows attackers to exploit Directory Traversal when user input is not validated? ]
- CSRF
- SQL Injection
* Directory Traversal
- XSS
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1282: Which problem involves HTTP security headers in web applications? ]
* X-Frame-Options
- SQL Prepared Statements
- Rate Limiting
- Using Frameworks
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1283: What is the primary risk associated with Sensitive Data Exposure in web applications? ]
- Clickjacking
- SSRF
- Broken Access Control
* Encrypt sensitive data at rest and in transit; secure key management
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1284: Which vulnerability is described by: Credential Stuffing in web applications? ]
- SSRF
* Use multi-factor authentication (MFA) and rate limiting
- Phishing
- Broken Authentication
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1285: Which vulnerability category covers Rate Limiting / Throttling for public web APIs? ]
* Rate Limiting / Throttling
- Encryption
- XSS
- CSRF
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1286: Which issue allows attackers to exploit SQL Injection? ]
- Broken Authentication
- Cross-Site Scripting (XSS)
* Use prepared statements / parameterized queries
- Clickjacking
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1287: Which vulnerability category covers SQL Injection in single-page applications? ]
- Broken Authentication
- Clickjacking
- Insecure Deserialization
* Use prepared statements / parameterized queries
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1288: Which of the following best matches: Directory Traversal when user input is not validated? ]
- XSS
* Directory Traversal
- SQL Injection
- CSRF
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1289: What is the primary risk associated with Server-Side Request Forgery (SSRF) in microservices? ]
- Brute Force
* Server-Side Request Forgery (SSRF)
- CSRF
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1290: Which of these is an example of Server-Side Request Forgery (SSRF) in backend servers? ]
- XSS
* Server-Side Request Forgery (SSRF)
- Directory Traversal
- CSRF
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1291: Identify the vulnerability: Cross-Site Scripting (XSS) in modern web apps. ]
- Insecure Design
- Buffer Overflow
- SQL Injection
* Output encoding and Content Security Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1292: Which issue allows attackers to exploit Using Components with Known Vulnerabilities in backend servers? ]
- Broken Access Control
* Output encoding and Content Security Policy (CSP)
- XSS
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1293: Which vulnerability could lead to Password hashing in HTTP-based services in an application? ]
- MD5
- SSL/TLS
- Plaintext Storage
* Argon2
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1294: Which vulnerability category covers Clickjacking in web applications? ]
- CSRF
- XSS
- Insecure Deserialization
* Clickjacking
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 

[Poll:1295: Identify the vulnerability: Rate Limiting / Throttling in single-page applications. ]
- Encryption
* CSRF
- XSS
- Rate Limiting / Throttling
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1296: What is the primary risk associated with Using Components with Known Vulnerabilities? ]
- Broken Access Control
- Buffer Overflow
* Output encoding and Content Security Policy (CSP)
- XSS
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1297: What is the primary risk associated with Credential Stuffing? ]
* Use multi-factor authentication (MFA) and rate limiting
- SQL Injection
- SSRF
- Phishing
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1298: When auditing an API, Which control helps mitigate Cross-Site Request Forgery (CSRF) in web applications? ]
- SQL Injection
* Cross-Site Request Forgery (CSRF)
- XSS
- Clickjacking
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 
[Poll:1299: Which of the following best matches: SameSite cookie in HTTP-based services? ]
- HSTS
* SameSite
- X-Frame-Options
- Server-Side Validation
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1300: When auditing an API, Which of these is an example of Password hashing? ]
- SSL/TLS
- Plaintext Storage
* Argon2
- MD5
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1301: Which of these is an example of TLS / Certificate issues when user input is not validated? ]
- XSS
- Misconfiguration
* TLS / Certificate issues
- SQL Injection
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1302: Which vulnerability is described by: Security Misconfiguration in web applications? ]
* Security Misconfiguration
- Insecure Deserialization
- CSRF
- Weak Passwords
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1303: Which control helps mitigate Directory Traversal in backend servers? ]
* CSRF
- XSS
- SQL Injection
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 
[Poll:1304: Which of the following best matches: HTTP security headers in backend servers? ]
- Using Frameworks
* X-Frame-Options
- SQL Prepared Statements
- Rate Limiting
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1305: Which problem involves Content Security Policy (CSP) in single-page applications? ]
* SQL Prepared Statements
- SameSite
- Secure Cookies
- Content-Security-Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1306: During threat modeling, What is a common mitigation for Cross-Site Scripting (XSS) in web applications? ]
- Broken Access Control
- Insecure Design
- Buffer Overflow
* Output encoding and Content Security Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1307: Which vulnerability could lead to Broken Access Control when user input is not validated in an application? ]
- Misconfigured Headers
- XSS
- Broken Authentication
* Enforce authorization checks and use indirect references
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1308: Which vulnerability category covers Sensitive Data Exposure when user input is not validated? ]
- Cross-Site Scripting (XSS)
- Clickjacking
- SSRF
* Encrypt sensitive data at rest and in transit; secure key management
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1309: Which problem involves Content Security Policy (CSP) when user input is not validated? ]
* Content-Security-Policy (CSP)
- Secure Cookies
- SQL Prepared Statements
- SameSite
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1310: Identify the vulnerability: Rate Limiting / Throttling in backend servers. ]
- Encryption
* Rate Limiting / Throttling
- HSTS
- XSS
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1311: What is the primary risk associated with Rate Limiting / Throttling in microservices? ]
* CSRF
- HSTS
- XSS
- Rate Limiting / Throttling
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1312: Which vulnerability category covers Insecure Deserialization in single-page applications? ]
- Directory Traversal
- Buffer Overflow
* Insecure Deserialization
- Cross-Site Scripting (XSS)
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1313: Identify the vulnerability: Broken Authentication when user input is not validated. ]
- Credential Stuffing
* Broken Authentication
- Directory Traversal
- CSRF
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1314: Identify the vulnerability: Sensitive Data Exposure when user input is not validated. ]
- SSRF
- Cross-Site Scripting (XSS)
* Encrypt sensitive data at rest and in transit; secure key management
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1315: Identify the vulnerability: Broken Authentication in backend servers. ]
- Credential Stuffing
- CSRF
* Broken Authentication
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1316: During threat modeling, Which vulnerability could lead to Content Security Policy (CSP) for public web APIs in an application? ]
- Secure Cookies
- SameSite
* SQL Prepared Statements
- Content-Security-Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1317: Which vulnerability is described by: Content Security Policy (CSP) in modern web apps? ]
* SQL Prepared Statements
- Content-Security-Policy (CSP)
- HSTS
- Secure Cookies
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1318: In a secure dev context, What is the primary risk associated with Broken Access Control when user input is not validated? ]
* Enforce authorization checks and use indirect references
- XSS
- Broken Authentication
- Misconfigured Headers
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1319: As a multiple-choice question, Which issue allows attackers to exploit Server-Side Request Forgery (SSRF) in modern web apps? ]
- XSS
* Server-Side Request Forgery (SSRF)
- Brute Force
- CSRF
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1320: Which vulnerability could lead to Insufficient Logging & Monitoring in an application? ]
* Insufficient Logging and Monitoring
- Insecure Design
- Buffer Overflow
- Credential Stuffing
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1321: What is the primary risk associated with Insufficient Logging & Monitoring for public web APIs? ]
- Credential Stuffing
- Buffer Overflow
- Insecure Design
* Insufficient Logging and Monitoring
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1322: Which vulnerability is described by: Cross-Site Scripting (XSS) in single-page applications? ]
- SQL Injection
- Buffer Overflow
- Insecure Design
* Output encoding and Content Security Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1323: For an app security quiz, Which control helps mitigate Server-Side Request Forgery (SSRF) in microservices? ]
- Brute Force
* CSRF
- Server-Side Request Forgery (SSRF)
- XSS
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 
[Poll:1324: Which issue allows attackers to exploit Rate Limiting / Throttling in web applications? ]
- HSTS
- XSS
* Rate Limiting / Throttling
- CSRF
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1325: Which vulnerability category covers Using Components with Known Vulnerabilities when user input is not validated? ]
- XSS
- SQL Injection
- Buffer Overflow
* Using Components with Known Vulnerabilities
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1326: Identify the vulnerability: Insufficient Logging & Monitoring when user input is not validated. ]
* Insufficient Logging and Monitoring
- Insecure Design
- Buffer Overflow
- Credential Stuffing
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1327: Which control helps mitigate HTTP security headers in HTTP-based services? ]
- SQL Prepared Statements
- Input Validation
* X-Frame-Options
- Using Frameworks
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1328: Which vulnerability category covers TLS / Certificate issues in backend servers? ]
- SQL Injection
- Weak Passwords
* TLS / Certificate issues
- Misconfiguration
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1329: Which vulnerability category covers Directory Traversal in HTTP-based services? ]
- SQL Injection
- Misconfiguration
* Directory Traversal
- XSS
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1330: In web security, what does Broken Access Control in single-page applications usually refer to? ]
- XSS
- Insecure Design
- Misconfigured Headers
* Enforce authorization checks and use indirect references
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1331: Which vulnerability category covers Insecure Deserialization when user input is not validated? ]
* Insecure Deserialization
- SQL Injection
- Buffer Overflow
- Cross-Site Scripting (XSS)
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1332: What is the primary risk associated with Broken Authentication? ]
* Broken Authentication
- CSRF
- Insecure Deserialization
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1333: Which vulnerability is described by: SameSite cookie in microservices? ]
- Server-Side Validation
- X-Frame-Options
* SameSite
- CSP
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1334: For an app security quiz, Which vulnerability could lead to Sensitive Data Exposure in HTTP-based services in an application? ]
* Encrypt sensitive data at rest and in transit; secure key management
- Cross-Site Scripting (XSS)
- Broken Access Control
- SSRF
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1335: What is a common mitigation for SameSite cookie in web applications? ]
- X-Frame-Options
- Server-Side Validation
* SameSite
- CSP
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1336: In a secure dev context, Which control helps mitigate Broken Authentication for public web APIs? ]
- Broken Authentication
- Insecure Deserialization
- Directory Traversal
* CSRF
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 
[Poll:1337: Which of the following best matches: Broken Authentication in modern web apps? ]
- Insecure Deserialization
- Directory Traversal
* Broken Authentication
- CSRF
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1338: In a secure dev context, In web security, what does Broken Authentication in single-page applications usually refer to? ]
- Insecure Deserialization
* Broken Authentication
- Credential Stuffing
- CSRF
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1339: What is a common mitigation for Insecure Deserialization in modern web apps? ]
- Buffer Overflow
- SQL Injection
* Validate/whitelist serialized types or avoid deserializing untrusted data
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1340: Which vulnerability category covers Cross-Site Scripting (XSS) in backend servers? ]
* Output encoding and Content Security Policy (CSP)
- Insecure Design
- Broken Access Control
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1341: Which vulnerability is described by: HTTP security headers in HTTP-based services? ]
* X-Frame-Options
- Input Validation
- Rate Limiting
- Using Frameworks
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1342: In web security, what does Password hashing in HTTP-based services usually refer to? ]
- CSP
* Argon2
- Plaintext Storage
- SSL/TLS
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1343: Which issue allows attackers to exploit Password hashing when user input is not validated? ]
- Plaintext Storage
* Argon2
- MD5
- CSP
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1344: For an app security quiz, Which vulnerability is described by: Insufficient Logging & Monitoring in web applications? ]
- Insecure Design
- Credential Stuffing
* Insufficient Logging and Monitoring
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1345: Which vulnerability is described by: Rate Limiting / Throttling when user input is not validated? ]
* Rate Limiting / Throttling
- Encryption
- CSRF
- XSS
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1346: When auditing an API, Which issue allows attackers to exploit Rate Limiting / Throttling in web applications? ]
- Encryption
- XSS
* CSRF
- Rate Limiting / Throttling
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1347: Which vulnerability is described by: Content Security Policy (CSP) in backend servers? ]
- Secure Cookies
* SQL Prepared Statements
- Content-Security-Policy (CSP)
- SameSite
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1348: Which of these is an example of Insufficient Logging & Monitoring? ]
- Insecure Design
* Insufficient Logging and Monitoring
- Credential Stuffing
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1349: Which vulnerability category covers TLS / Certificate issues in HTTP-based services? ]
- Misconfiguration
- Weak Passwords
- XSS
* TLS / Certificate issues
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1350: Which vulnerability is described by: SameSite cookie? ]
- Server-Side Validation
* SameSite
- CSP
- HSTS
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1351: Which of the following best matches: Cross-Site Request Forgery (CSRF) in backend servers? ]
- Clickjacking
- XSS
* Cross-Site Request Forgery (CSRF)
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 

[Poll:1352: For an app security quiz, Which issue allows attackers to exploit Using Components with Known Vulnerabilities in single-page applications? ]
- XSS
* Using Components with Known Vulnerabilities
- SQL Injection
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1353: Which vulnerability category covers HTTP security headers in single-page applications? ]
- Using Frameworks
- Rate Limiting
- SQL Prepared Statements
* X-Frame-Options
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1354: What is a common mitigation for Password hashing in web applications? ]
- CSP
* Argon2
- SSL/TLS
- MD5
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1355: In a secure dev context, Which of the following best matches: SQL Injection? ]
- Broken Authentication
* Use prepared statements / parameterized queries
- Insecure Deserialization
- Cross-Site Scripting (XSS)
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1356: Identify the vulnerability: TLS / Certificate issues in modern web apps. ]
- SQL Injection
* TLS / Certificate issues
- Misconfiguration
- XSS
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1357: Identify the vulnerability: Rate Limiting / Throttling in microservices. ]
* CSRF
- XSS
- Rate Limiting / Throttling
- Encryption
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1358: Which problem involves Cross-Site Request Forgery (CSRF) for public web APIs? ]
- Clickjacking
- SSRF
* Cross-Site Request Forgery (CSRF)
- XSS
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 

[Poll:1359: Which of these is an example of Insufficient Logging & Monitoring in modern web apps? ]
* Insufficient Logging and Monitoring
- Buffer Overflow
- Insecure Design
- Credential Stuffing
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1360: Which control helps mitigate HTTP security headers for public web APIs? ]
* X-Frame-Options
- Rate Limiting
- SQL Prepared Statements
- Using Frameworks
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1361: Which of these is an example of Cross-Site Scripting (XSS) in microservices? ]
- Insecure Design
- SQL Injection
* Output encoding and Content Security Policy (CSP)
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1362: In web security, what does Credential Stuffing in single-page applications usually refer to? ]
- SQL Injection
- Broken Authentication
- Phishing
* Use multi-factor authentication (MFA) and rate limiting
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1363: Which problem involves SameSite cookie? ]
- CSP
* SameSite
- Server-Side Validation
- X-Frame-Options
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1364: Which control helps mitigate Insufficient Logging & Monitoring in backend servers? ]
- Credential Stuffing
* Use multi-factor authentication (MFA) and rate limiting
- Insecure Design
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1365: Which vulnerability category covers Server-Side Request Forgery (SSRF) in HTTP-based services? ]
- CSRF
* Server-Side Request Forgery (SSRF)
- Directory Traversal
- Brute Force
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1366: During threat modeling, Which issue allows attackers to exploit Broken Access Control in single-page applications? ]
* Enforce authorization checks and use indirect references
- Broken Authentication
- Insecure Design
- XSS
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1367: Which problem involves Broken Authentication in microservices? ]
- Directory Traversal
- Insecure Deserialization
- Credential Stuffing
* Broken Authentication
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1368: In web security, what does Using Components with Known Vulnerabilities when user input is not validated usually refer to? ]
- XSS
- SQL Injection
- Broken Access Control
* Output encoding and Content Security Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1369: In web security, what does Content Security Policy (CSP) in microservices usually refer to? ]
- HSTS
* Content-Security-Policy (CSP)
- SameSite
- Secure Cookies
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1370: During threat modeling, Which control helps mitigate SameSite cookie when user input is not validated? ]
- Server-Side Validation
- CSP
* SameSite
- X-Frame-Options
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1371: Which of these is an example of Server-Side Request Forgery (SSRF) in single-page applications? ]
- Brute Force
- XSS
- CSRF
* Server-Side Request Forgery (SSRF)
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1372: Which vulnerability could lead to Cross-Site Scripting (XSS) in backend servers in an application? ]
- Broken Access Control
- Buffer Overflow
* Output encoding and Content Security Policy (CSP)
- Insecure Design
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1373: Which of these is an example of HTTP security headers when user input is not validated? ]
- Rate Limiting
- Using Frameworks
- SQL Prepared Statements
* X-Frame-Options
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1374: Which of these is an example of Credential Stuffing in single-page applications? ]
- Phishing
- SSRF
- SQL Injection
* Use multi-factor authentication (MFA) and rate limiting
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1375: For an app security quiz, Which issue allows attackers to exploit SQL Injection in single-page applications? ]
- Broken Authentication
* Use prepared statements / parameterized queries
- Insecure Deserialization
- Clickjacking
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1376: Which of these is an example of SameSite cookie in web applications? ]
- Server-Side Validation
* SameSite
- X-Frame-Options
- HSTS
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1377: Which of the following best matches: Sensitive Data Exposure in backend servers? ]
- Broken Access Control
- Clickjacking
* Encrypt sensitive data at rest and in transit; secure key management
- Cross-Site Scripting (XSS)
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1378: What is a common mitigation for Insufficient Logging & Monitoring in single-page applications? ]
* Use multi-factor authentication (MFA) and rate limiting
- Buffer Overflow
- Insecure Design
- Credential Stuffing
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1379: As a multiple-choice question, Which control helps mitigate Server-Side Request Forgery (SSRF) for public web APIs? ]
- Server-Side Request Forgery (SSRF)
- Brute Force
- Directory Traversal
* CSRF
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 
[Poll:1380: Which problem involves SameSite cookie in HTTP-based services? ]
* SameSite
- Server-Side Validation
- HSTS
- CSP
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1381: What is the primary risk associated with Credential Stuffing for public web APIs? ]
- SQL Injection
- Phishing
* Use multi-factor authentication (MFA) and rate limiting
- Broken Authentication
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1382: In web security, what does Security Misconfiguration in microservices usually refer to? ]
- CSRF
- Weak Passwords
* Security Misconfiguration
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1383: What is a common mitigation for Cross-Site Request Forgery (CSRF)? ]
- Clickjacking
- SSRF
- XSS
* Cross-Site Request Forgery (CSRF)
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 
[Poll:1384: What is a common mitigation for Cross-Site Scripting (XSS) when user input is not validated? ]
- Insecure Design
- SQL Injection
* Output encoding and Content Security Policy (CSP)
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1385: Identify the vulnerability: Broken Authentication in HTTP-based services. ]
- CSRF
* Broken Authentication
- Directory Traversal
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1386: Which vulnerability could lead to Insecure Deserialization when user input is not validated in an application? ]
- Cross-Site Scripting (XSS)
- Directory Traversal
* Insecure Deserialization
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1387: For an app security quiz, Which of these is an example of Broken Authentication for public web APIs? ]
* Broken Authentication
- Directory Traversal
- Credential Stuffing
- CSRF
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1388: When auditing an API, Which of these is an example of Using Components with Known Vulnerabilities in modern web apps? ]
* Using Components with Known Vulnerabilities
- SQL Injection
- Buffer Overflow
- XSS
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1389: Which problem involves Rate Limiting / Throttling in backend servers? ]
- XSS
- HSTS
* Rate Limiting / Throttling
- CSRF
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1390: In web security, what does Security Misconfiguration in modern web apps usually refer to? ]
* Security Misconfiguration
- CSRF
- SQL Injection
- Weak Passwords
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1391: What is the primary risk associated with SQL Injection in microservices? ]
- Clickjacking
- Insecure Deserialization
* Use prepared statements / parameterized queries
- Broken Authentication
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1392: What is a common mitigation for Content Security Policy (CSP) for public web APIs? ]
- SameSite
* Content-Security-Policy (CSP)
- SQL Prepared Statements
- HSTS
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1393: In web security, what does HTTP security headers usually refer to? ]
- Using Frameworks
- Input Validation
* X-Frame-Options
- SQL Prepared Statements
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1394: Which vulnerability is described by: Using Components with Known Vulnerabilities in HTTP-based services? ]
* Output encoding and Content Security Policy (CSP)
- SQL Injection
- Broken Access Control
- XSS
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1395: Which of these is an example of Sensitive Data Exposure in single-page applications? ]
* Encrypt sensitive data at rest and in transit; secure key management
- Broken Access Control
- Cross-Site Scripting (XSS)
- SSRF
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1396: Which issue allows attackers to exploit TLS / Certificate issues in microservices? ]
* TLS / Certificate issues
- XSS
- Misconfiguration
- Weak Passwords
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1397: When auditing an API, Which vulnerability could lead to Cross-Site Request Forgery (CSRF) in modern web apps in an application? ]
- SQL Injection
- XSS
* Cross-Site Request Forgery (CSRF)
- Clickjacking
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 

[Poll:1398: What is the primary risk associated with HTTP security headers for public web APIs? ]
- Using Frameworks
- SQL Prepared Statements
- Input Validation
* X-Frame-Options
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1399: Which control helps mitigate Sensitive Data Exposure when user input is not validated? ]
- Clickjacking
- Broken Access Control
* Encrypt sensitive data at rest and in transit; secure key management
- SSRF
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1400: Which vulnerability could lead to Sensitive Data Exposure in backend servers in an application? ]
- Clickjacking
- Broken Access Control
* Encrypt sensitive data at rest and in transit; secure key management
- Cross-Site Scripting (XSS)
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1401: Identify the vulnerability: SameSite cookie in HTTP-based services. ]
- HSTS
- X-Frame-Options
* SameSite
- CSP
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1402: Which of the following best matches: Directory Traversal? ]
- XSS
- SQL Injection
* Directory Traversal
- Misconfiguration
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1403: What is the primary risk associated with Cross-Site Scripting (XSS) in backend servers? ]
- Insecure Design
- Broken Access Control
- Buffer Overflow
* Output encoding and Content Security Policy (CSP)
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1404: Which vulnerability category covers Directory Traversal in backend servers? ]
- Misconfiguration
- SQL Injection
- XSS
* Directory Traversal
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1405: What is a common mitigation for Broken Access Control? ]
* Enforce authorization checks and use indirect references
- Insecure Design
- XSS
- Misconfigured Headers
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1406: Which vulnerability is described by: Broken Access Control when user input is not validated? ]
- Misconfigured Headers
- XSS
- Insecure Design
* Enforce authorization checks and use indirect references
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1407: Which vulnerability is described by: Using Components with Known Vulnerabilities in web applications? ]
* Output encoding and Content Security Policy (CSP)
- XSS
- Broken Access Control
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1408: Which of the following best matches: SQL Injection in modern web apps? ]
- Cross-Site Scripting (XSS)
- Insecure Deserialization
- Clickjacking
* Use prepared statements / parameterized queries
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1409: Identify the vulnerability: Directory Traversal for public web APIs. ]
- Misconfiguration
- SQL Injection
- XSS
* Directory Traversal
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1410: Which vulnerability is described by: Credential Stuffing in modern web apps? ]
- SQL Injection
* Use multi-factor authentication (MFA) and rate limiting
- Phishing
- SSRF
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1411: In web security, what does Server-Side Request Forgery (SSRF) in backend servers usually refer to? ]
- CSRF
- XSS
- Brute Force
* Server-Side Request Forgery (SSRF)
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1412: Which control helps mitigate Content Security Policy (CSP) in HTTP-based services? ]
* Content-Security-Policy (CSP)
- SameSite
- HSTS
- Secure Cookies
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1413: Which vulnerability is described by: Content Security Policy (CSP) for public web APIs? ]
* Content-Security-Policy (CSP)
- SQL Prepared Statements
- SameSite
- Secure Cookies
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1414: Which issue allows attackers to exploit Server-Side Request Forgery (SSRF)? ]
- Directory Traversal
* Server-Side Request Forgery (SSRF)
- XSS
- Brute Force
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1415: As a multiple-choice question, Which issue allows attackers to exploit Credential Stuffing in single-page applications? ]
* Use multi-factor authentication (MFA) and rate limiting
- SSRF
- SQL Injection
- Phishing
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1416: During threat modeling, Which vulnerability is described by: SQL Injection in backend servers? ]
- Cross-Site Scripting (XSS)
- Insecure Deserialization
* Use prepared statements / parameterized queries
- Clickjacking
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1417: Identify the vulnerability: Credential Stuffing in modern web apps. ]
- Broken Authentication
* Use multi-factor authentication (MFA) and rate limiting
- SQL Injection
- SSRF
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1418: Which of these is an example of Credential Stuffing in web applications? ]
- SQL Injection
- Phishing
* Use multi-factor authentication (MFA) and rate limiting
- Broken Authentication
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1419: Identify the vulnerability: Using Components with Known Vulnerabilities in microservices. ]
- Buffer Overflow
- SQL Injection
* Use prepared statements / parameterized queries
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1420: When auditing an API, Which of the following best matches: SQL Injection in HTTP-based services? ]
- Broken Authentication
- Insecure Deserialization
- Cross-Site Scripting (XSS)
* Use prepared statements / parameterized queries
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1421: For an app security quiz, Which problem involves Credential Stuffing in web applications? ]
* Use multi-factor authentication (MFA) and rate limiting
- Broken Authentication
- SQL Injection
- Phishing
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1422: Which issue allows attackers to exploit SameSite cookie when user input is not validated? ]
- Server-Side Validation
- CSP
* SameSite
- X-Frame-Options
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1423: Identify the vulnerability: SameSite cookie for public web APIs. ]
- X-Frame-Options
* SameSite
- Server-Side Validation
- HSTS
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1424: Which problem involves Password hashing in backend servers? ]
- Plaintext Storage
* Argon2
- CSP
- SSL/TLS
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1425: During threat modeling, Which control helps mitigate Cross-Site Request Forgery (CSRF)? ]
- XSS
- Clickjacking
- SSRF
* Cross-Site Request Forgery (CSRF)
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 
[Poll:1426: What is a common mitigation for SameSite cookie when user input is not validated? ]
- X-Frame-Options
- CSP
- HSTS
* SameSite
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1427: Which control helps mitigate Clickjacking? ]
* X-Frame-Options or Content-Security-Policy `frame-ancestors`
- XSS
- Broken Access Control
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 

[Poll:1428: When auditing an API, In web security, what does SQL Injection usually refer to? ]
- Clickjacking
* Use prepared statements / parameterized queries
- Cross-Site Scripting (XSS)
- Broken Authentication
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1429: In a secure dev context, Identify the vulnerability: Password hashing for public web APIs. ]
* Argon2
- Plaintext Storage
- SSL/TLS
- MD5
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1430: What is the primary risk associated with Insufficient Logging & Monitoring in HTTP-based services? ]
- Insecure Design
- Buffer Overflow
- Credential Stuffing
* Insufficient Logging and Monitoring
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1431: Which issue allows attackers to exploit Directory Traversal in modern web apps? ]
- SQL Injection
- CSRF
* Directory Traversal
- Misconfiguration
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1432: Which vulnerability is described by: SQL Injection in backend servers? ]
- Clickjacking
- Insecure Deserialization
- Cross-Site Scripting (XSS)
* Use prepared statements / parameterized queries
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1433: Which vulnerability could lead to Security Misconfiguration in microservices in an application? ]
- Insecure Deserialization
* Security Misconfiguration
- Weak Passwords
- CSRF
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1434: Which vulnerability could lead to Cross-Site Scripting (XSS) in microservices in an application? ]
- Broken Access Control
- SQL Injection
* Output encoding and Content Security Policy (CSP)
- Insecure Design
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1435: What is the primary risk associated with Cross-Site Scripting (XSS) for public web APIs? ]
* Output encoding and Content Security Policy (CSP)
- Buffer Overflow
- SQL Injection
- Insecure Design
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1436: During threat modeling, Which of the following best matches: Using Components with Known Vulnerabilities in modern web apps? ]
- Buffer Overflow
- XSS
* Output encoding and Content Security Policy (CSP)
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1437: When auditing an API, Which control helps mitigate HTTP security headers in microservices? ]
* X-Frame-Options
- SQL Prepared Statements
- Input Validation
- Using Frameworks
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1438: Identify the vulnerability: TLS / Certificate issues in backend servers. ]
* TLS / Certificate issues
- XSS
- SQL Injection
- Weak Passwords
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1439: Which vulnerability is described by: SQL Injection in single-page applications? ]
- Cross-Site Scripting (XSS)
* Use prepared statements / parameterized queries
- Broken Authentication
- Clickjacking
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1440: Which control helps mitigate Using Components with Known Vulnerabilities in HTTP-based services? ]
- XSS
* Output encoding and Content Security Policy (CSP)
- Buffer Overflow
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1441: Which problem involves Content Security Policy (CSP)? ]
- Secure Cookies
* Content-Security-Policy (CSP)
- SameSite
- SQL Prepared Statements
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1442: When auditing an API, Which issue allows attackers to exploit Credential Stuffing? ]
- SSRF
- Phishing
* Use multi-factor authentication (MFA) and rate limiting
- Broken Authentication
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1443: Which issue allows attackers to exploit Rate Limiting / Throttling in single-page applications? ]
- HSTS
* Rate Limiting / Throttling
- XSS
- Encryption
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1444: During threat modeling, Which of these is an example of Broken Authentication in modern web apps? ]
- Insecure Deserialization
- CSRF
- Directory Traversal
* Broken Authentication
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1445: Which vulnerability category covers Cross-Site Request Forgery (CSRF) in single-page applications? ]
- SQL Injection
* Cross-Site Request Forgery (CSRF)
- SSRF
- Clickjacking
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 

[Poll:1446: Identify the vulnerability: Server-Side Request Forgery (SSRF). ]
- CSRF
* Server-Side Request Forgery (SSRF)
- Directory Traversal
- Brute Force
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1447: As a multiple-choice question, Which control helps mitigate Directory Traversal in modern web apps? ]
- Misconfiguration
* CSRF
- Directory Traversal
- XSS
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 
[Poll:1448: Which of these is an example of SQL Injection in microservices? ]
- Cross-Site Scripting (XSS)
- Insecure Deserialization
* Use prepared statements / parameterized queries
- Broken Authentication
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1449: Which issue allows attackers to exploit Broken Access Control in backend servers? ]
* Enforce authorization checks and use indirect references
- Broken Authentication
- Misconfigured Headers
- Insecure Design
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1450: Which issue allows attackers to exploit Insufficient Logging & Monitoring when user input is not validated? ]
- Buffer Overflow
- Insecure Design
- Credential Stuffing
* Insufficient Logging and Monitoring
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1451: As a multiple-choice question, Which vulnerability is described by: Rate Limiting / Throttling in web applications? ]
- Encryption
* Rate Limiting / Throttling
- CSRF
- XSS
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1452: For an app security quiz, Identify the vulnerability: Clickjacking in backend servers. ]
- Broken Access Control
- XSS
- Insecure Deserialization
* X-Frame-Options or Content-Security-Policy `frame-ancestors`
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 

[Poll:1453: Which control helps mitigate HTTP security headers when user input is not validated? ]
- Rate Limiting
- Input Validation
- Using Frameworks
* X-Frame-Options
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1454: Which issue allows attackers to exploit Sensitive Data Exposure for public web APIs? ]
- Cross-Site Scripting (XSS)
- SSRF
* Encrypt sensitive data at rest and in transit; secure key management
- Clickjacking
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1455: Which vulnerability category covers Broken Authentication in single-page applications? ]
* Broken Authentication
- CSRF
- Insecure Deserialization
- Credential Stuffing
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1456: In a secure dev context, Which issue allows attackers to exploit Insufficient Logging & Monitoring in microservices? ]
- Insecure Design
- Credential Stuffing
- Buffer Overflow
* Insufficient Logging and Monitoring
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1457: Which vulnerability could lead to Sensitive Data Exposure in single-page applications in an application? ]
- SSRF
- Cross-Site Scripting (XSS)
* Encrypt sensitive data at rest and in transit; secure key management
- Clickjacking
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1458: Which of the following best matches: Insufficient Logging & Monitoring in microservices? ]
- Buffer Overflow
- Insecure Design
* Insufficient Logging and Monitoring
- Credential Stuffing
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1459: In web security, what does Content Security Policy (CSP) in web applications usually refer to? ]
- SameSite
- Secure Cookies
* Content-Security-Policy (CSP)
- SQL Prepared Statements
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1460: During threat modeling, Which problem involves Content Security Policy (CSP) in web applications? ]
* SQL Prepared Statements
- SameSite
- Content-Security-Policy (CSP)
- Secure Cookies
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1461: Identify the vulnerability: Cross-Site Request Forgery (CSRF) in web applications. ]
- SSRF
- Clickjacking
- XSS
* Cross-Site Request Forgery (CSRF)
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 

[Poll:1462: Which vulnerability category covers Directory Traversal? ]
* Directory Traversal
- CSRF
- Misconfiguration
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1463: Which problem involves Server-Side Request Forgery (SSRF)? ]
* Server-Side Request Forgery (SSRF)
- Directory Traversal
- Brute Force
- XSS
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1464: What is a common mitigation for Directory Traversal when user input is not validated? ]
- XSS
* Validate and sanitize file path inputs; use chroot or canonicalization
- SQL Injection
- Misconfiguration
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1465: Which control helps mitigate Rate Limiting / Throttling in backend servers? ]
- XSS
- HSTS
* Rate Limiting / Throttling
- CSRF
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1466: Which issue allows attackers to exploit Server-Side Request Forgery (SSRF) in HTTP-based services? ]
* Server-Side Request Forgery (SSRF)
- CSRF
- Brute Force
- XSS
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1467: In web security, what does Broken Authentication in HTTP-based services usually refer to? ]
* Broken Authentication
- Insecure Deserialization
- Directory Traversal
- Credential Stuffing
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1468: For an app security quiz, Which issue allows attackers to exploit Server-Side Request Forgery (SSRF) in modern web apps? ]
- Directory Traversal
* Server-Side Request Forgery (SSRF)
- CSRF
- Brute Force
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1469: Which of the following best matches: Broken Authentication? ]
- Insecure Deserialization
- Credential Stuffing
* Broken Authentication
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1470: Which vulnerability is described by: SameSite cookie in modern web apps? ]
* SameSite
- Server-Side Validation
- CSP
- X-Frame-Options
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1471: During threat modeling, What is the primary risk associated with Clickjacking in modern web apps? ]
- Insecure Deserialization
- XSS
- Broken Access Control
* X-Frame-Options or Content-Security-Policy `frame-ancestors`
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 

[Poll:1472: Which problem involves Clickjacking for public web APIs? ]
- CSRF
* Clickjacking
- XSS
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 

[Poll:1473: In web security, what does Insecure Deserialization in web applications usually refer to? ]
* Insecure Deserialization
- Directory Traversal
- SQL Injection
- Cross-Site Scripting (XSS)
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1474: Which issue allows attackers to exploit Insufficient Logging & Monitoring in modern web apps? ]
- Credential Stuffing
- Buffer Overflow
- Insecure Design
* Insufficient Logging and Monitoring
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1475: Which vulnerability is described by: Cross-Site Request Forgery (CSRF) in modern web apps? ]
* Cross-Site Request Forgery (CSRF)
- SSRF
- SQL Injection
- Clickjacking
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 

[Poll:1476: Which of these is an example of Insufficient Logging & Monitoring in backend servers? ]
* Insufficient Logging and Monitoring
- Buffer Overflow
- Credential Stuffing
- Insecure Design
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1477: As a multiple-choice question, Which control helps mitigate Cross-Site Scripting (XSS) in modern web apps? ]
- Insecure Design
* Output encoding and Content Security Policy (CSP)
- Broken Access Control
- Buffer Overflow
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1478: Which vulnerability could lead to Broken Authentication in web applications in an application? ]
- Directory Traversal
- Insecure Deserialization
* Broken Authentication
- CSRF
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1479: What is the primary risk associated with Cross-Site Request Forgery (CSRF) in backend servers? ]
* Cross-Site Request Forgery (CSRF)
- Clickjacking
- SSRF
- XSS
> Explanation:
> ✅ Correct Answer: **Cross-Site Request Forgery (CSRF)**
> Forces an authenticated user's browser to perform unintended actions.
> 

[Poll:1480: What is the primary risk associated with Clickjacking in modern web apps? ]
- Clickjacking
- Broken Access Control
* CSRF
- XSS
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 
[Poll:1481: Which problem involves Sensitive Data Exposure in HTTP-based services? ]
- Broken Access Control
- Cross-Site Scripting (XSS)
* Encrypt sensitive data at rest and in transit; secure key management
- SSRF
> Explanation:
> ✅ Correct Answer: **Sensitive Data Exposure**
> Insufficient protection of data at rest or in transit.
> 

[Poll:1482: Which of the following best matches: Cross-Site Scripting (XSS) in single-page applications? ]
* Output encoding and Content Security Policy (CSP)
- Buffer Overflow
- SQL Injection
- Insecure Design
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1483: Which issue allows attackers to exploit SameSite cookie? ]
- Server-Side Validation
- X-Frame-Options
* SameSite
- HSTS
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1484: Which of these is an example of Server-Side Request Forgery (SSRF) in web applications? ]
* Server-Side Request Forgery (SSRF)
- CSRF
- XSS
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Server-Side Request Forgery (SSRF)**
> Server-side URL fetch features can be abused to reach internal resources.
> 

[Poll:1485: In web security, what does HTTP security headers in web applications usually refer to? ]
- Input Validation
- Using Frameworks
- Rate Limiting
* X-Frame-Options
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1486: What is the primary risk associated with Broken Access Control in backend servers? ]
- XSS
- Broken Authentication
- Insecure Design
* Enforce authorization checks and use indirect references
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1487: Which vulnerability is described by: Content Security Policy (CSP) in microservices? ]
- HSTS
- Secure Cookies
* Content-Security-Policy (CSP)
- SQL Prepared Statements
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1488: What is a common mitigation for Using Components with Known Vulnerabilities in modern web apps? ]
- SQL Injection
- Broken Access Control
- Buffer Overflow
* Use prepared statements / parameterized queries
> Explanation:
> ✅ Correct Answer: **Using Components with Known Vulnerabilities**
> Outdated libraries may contain known CVEs.
> 

[Poll:1489: For an app security quiz, Identify the vulnerability: Insufficient Logging & Monitoring in web applications. ]
- Buffer Overflow
* Insufficient Logging and Monitoring
- Credential Stuffing
- Insecure Design
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1490: Which of these is an example of Security Misconfiguration for public web APIs? ]
- Insecure Deserialization
- Weak Passwords
- CSRF
* Security Misconfiguration
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1491: When auditing an API, Which of these is an example of Rate Limiting / Throttling in single-page applications? ]
- XSS
- Encryption
- HSTS
* Rate Limiting / Throttling
> Explanation:
> ✅ Correct Answer: **Rate Limiting / Throttling**
> Limits request rates to prevent abuse.
> 
[Poll:1492: In web security, what does Clickjacking when user input is not validated usually refer to? ]
- Broken Access Control
- Insecure Deserialization
- Clickjacking
* CSRF
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 
[Poll:1493: For an app security quiz, Which vulnerability is described by: Credential Stuffing when user input is not validated? ]
- Phishing
- SQL Injection
- Broken Authentication
* Use multi-factor authentication (MFA) and rate limiting
> Explanation:
> ✅ Correct Answer: **Credential Stuffing**
> Replaying breached credentials across sites; MFA mitigates it.
> 

[Poll:1494: In web security, what does Cross-Site Scripting (XSS) in web applications usually refer to? ]
- SQL Injection
- Buffer Overflow
* Output encoding and Content Security Policy (CSP)
- Broken Access Control
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1495: Which problem involves Content Security Policy (CSP) for public web APIs? ]
* Content-Security-Policy (CSP)
- SameSite
- HSTS
- Secure Cookies
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1496: Which vulnerability category covers Insecure Deserialization in backend servers? ]
- SQL Injection
* Insecure Deserialization
- Buffer Overflow
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Insecure Deserialization**
> Untrusted serialized input can be unsafe when deserialized.
> 

[Poll:1497: Which of these is an example of Content Security Policy (CSP)? ]
* SQL Prepared Statements
- Content-Security-Policy (CSP)
- Secure Cookies
- SameSite
> Explanation:
> ✅ Correct Answer: **Content-Security-Policy (CSP)**
> CSP restricts script/resource sources to reduce XSS impact.
> 
[Poll:1498: As a multiple-choice question, Which of these is an example of TLS / Certificate issues in single-page applications? ]
- Misconfiguration
- SQL Injection
* TLS / Certificate issues
- Weak Passwords
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1499: As a multiple-choice question, Which of the following best matches: Password hashing in HTTP-based services? ]
- CSP
* Argon2
- MD5
- Plaintext Storage
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1500: Which vulnerability category covers HTTP security headers when user input is not validated? ]
- Rate Limiting
- Using Frameworks
* X-Frame-Options
- Input Validation
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1501: In a secure dev context, What is a common mitigation for SameSite cookie? ]
* SameSite
- CSP
- X-Frame-Options
- HSTS
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1502: As a multiple-choice question, Which problem involves Insufficient Logging & Monitoring in backend servers? ]
- Buffer Overflow
- Insecure Design
- Credential Stuffing
* Insufficient Logging and Monitoring
> Explanation:
> ✅ Correct Answer: **Insufficient Logging and Monitoring**
> Lack of logs/alerts delays detection of incidents.
> 

[Poll:1503: Identify the vulnerability: SQL Injection in single-page applications. ]
- Insecure Deserialization
- Cross-Site Scripting (XSS)
- Broken Authentication
* Use prepared statements / parameterized queries
> Explanation:
> ✅ Correct Answer: **SQL Injection**
> Injection of user input into SQL queries; parameterized queries mitigate it.
> 

[Poll:1504: Which vulnerability could lead to Directory Traversal in microservices in an application? ]
* Directory Traversal
- SQL Injection
- XSS
- CSRF
> Explanation:
> ✅ Correct Answer: **Directory Traversal**
> Manipulating file paths to access files outside intended directories.
> 

[Poll:1505: In web security, what does Cross-Site Scripting (XSS) in HTTP-based services usually refer to? ]
- Insecure Design
- Buffer Overflow
* Output encoding and Content Security Policy (CSP)
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Cross-Site Scripting (XSS)**
> Injection of scripts into pages viewed by other users; output encoding mitigates it.
> 

[Poll:1506: What is a common mitigation for Clickjacking in web applications? ]
* X-Frame-Options or Content-Security-Policy `frame-ancestors`
- XSS
- Broken Access Control
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 

[Poll:1507: What is the primary risk associated with Broken Access Control in HTTP-based services? ]
- Insecure Design
- Broken Authentication
* Enforce authorization checks and use indirect references
- Misconfigured Headers
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1508: Which problem involves SameSite cookie for public web APIs? ]
- HSTS
- X-Frame-Options
* SameSite
- Server-Side Validation
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1509: Which vulnerability category covers TLS / Certificate issues? ]
- SQL Injection
- XSS
* TLS / Certificate issues
- Weak Passwords
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1510: In web security, what does Clickjacking in modern web apps usually refer to? ]
- Broken Access Control
- XSS
- Clickjacking
* CSRF
> Explanation:
> ✅ Correct Answer: **Clickjacking**
> Framing a page to trick users into clicking hidden UI elements.
> 
[Poll:1511: Which problem involves TLS / Certificate issues in single-page applications? ]
- Misconfiguration
* TLS / Certificate issues
- XSS
- Weak Passwords
> Explanation:
> ✅ Correct Answer: **TLS / Certificate issues**
> Expired or weak certificates can break secure connections.
> 

[Poll:1512: When auditing an API, Which problem involves HTTP security headers in modern web apps? ]
- SQL Prepared Statements
* X-Frame-Options
- Rate Limiting
- Using Frameworks
> Explanation:
> ✅ Correct Answer: **X-Frame-Options**
> Headers like X-Frame-Options or CSP frame-ancestors protect against framing.
> 

[Poll:1513: Which of the following best matches: Broken Access Control when user input is not validated? ]
- Misconfigured Headers
- Insecure Design
* Enforce authorization checks and use indirect references
- XSS
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1514: Identify the vulnerability: Security Misconfiguration when user input is not validated. ]
- Weak Passwords
- CSRF
* Security Misconfiguration
- Insecure Deserialization
> Explanation:
> ✅ Correct Answer: **Security Misconfiguration**
> Insecure defaults or exposed services create risks.
> 

[Poll:1515: As a multiple-choice question, Which vulnerability is described by: Broken Access Control in modern web apps? ]
* Enforce authorization checks and use indirect references
- Insecure Design
- XSS
- Broken Authentication
> Explanation:
> ✅ Correct Answer: **Broken Access Control**
> Missing server-side authorization checks permit unauthorized actions.
> 

[Poll:1516: Which vulnerability could lead to Broken Authentication in backend servers in an application? ]
- Insecure Deserialization
* Broken Authentication
- Credential Stuffing
- Directory Traversal
> Explanation:
> ✅ Correct Answer: **Broken Authentication**
> Weak auth/session handling can allow impersonation.
> 

[Poll:1517: Which problem involves Password hashing when user input is not validated? ]
- MD5
- Plaintext Storage
* Argon2
- SSL/TLS
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1518: Which vulnerability could lead to SameSite cookie in an application? ]
- Server-Side Validation
* SameSite
- HSTS
- CSP
> Explanation:
> ✅ Correct Answer: **SameSite**
> Cookie attribute that restricts sending cookies on cross-site requests.
> 

[Poll:1519: What is a common mitigation for Password hashing in modern web apps? ]
- CSP
* Argon2
- MD5
- SSL/TLS
> Explanation:
> ✅ Correct Answer: **Argon2**
> Use modern memory-hard hashing (e.g., Argon2) for passwords.
> 

[Poll:1520: What are the core principles of cloud security? ]
- IAM roles
- CSP
* Confidentiality, Integrity, Availability (CIA) and shared responsibility
- Key rotation
> Explanation:
> ✅ Correct Answer: **Confidentiality, Integrity, Availability (CIA) and shared responsibility**
> ['Least Privilege only', 'Defense in depth only', 'High availability only']
> 

[Poll:1521: Explain the shared responsibility model in cloud security. ]
- IAM roles
- Key rotation
* Cloud provider handles infrastructure; customer handles data and config
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Cloud provider handles infrastructure; customer handles data and config**
> ['Customer is responsible for all physical hardware', 'Provider manages user application logic', 'Provider is responsible for customer data privacy by default']
> 

[Poll:1522: What is the principle of least privilege, and why is it important in cloud security? ]
- TLS
- Automated scanning
* Give users only the permissions they need to reduce risk
- Encryption
> Explanation:
> ✅ Correct Answer: **Give users only the permissions they need to reduce risk**
> ['Give admins full access to simplify management', 'Grant permissions based on popularity', 'Use only default roles always']
> 

[Poll:1523: How do you ensure data encryption in transit and at rest in a cloud environment? ]
- Policy-as-code
* Use TLS for transit and strong encryption (e.g., AES-256) at rest
- Harden defaults
- Defense in depth
> Explanation:
> ✅ Correct Answer: **Use TLS for transit and strong encryption (e.g., AES-256) at rest**
> ['Rely on HTTP only', 'Store keys in application source code', 'Disable encryption for performance']
> 

[Poll:1524: Describe the importance of identity and access management in cloud security. ]
- Policy-as-code
* Apply input validation, avoid unsafe deserialization, and run services with least privilege
- Backups
- Nmap
> Explanation:
> ✅ Correct Answer: **IAM controls who can access resources and enforces authorization**
> ['IAM is optional for public buckets', 'IAM only manages passwords', 'IAM replaces network firewalls entirely']
> 

[Poll:1525: What is a security group in AWS, and how does it differ from a network ACL? ]
- VPC
- CSRF
- SSRF
* Security groups are stateful instance-level firewalls; NACLs are stateless subnet-level rules
> Explanation:
> ✅ Correct Answer: **Security groups are stateful instance-level firewalls; NACLs are stateless subnet-level rules**
> ['Security groups are stateless and subnet-level', 'NACLs are stateful and attached to instances', 'They are identical and interchangeable']
> 

[Poll:1526: How can you secure data stored in cloud storage buckets like S3 or Blob Storage? ]
* Use access policies, encryption, least-privilege ACLs, and block public access where not needed
- Private networking
- CSRF
- Key rotation
> Explanation:
> ✅ Correct Answer: **Use access policies, encryption, least-privilege ACLs, and block public access where not needed**
> ['Make all buckets public for easy sharing', 'Store secrets in plaintext files', 'Disable logging to save costs']
> 

[Poll:1527: Explain the concept of data classification and how it's used in cloud security. ]
* Output encoding and Content Security Policy (CSP)
- XSS
- Access policies
- Key rotation
> Explanation:
> ✅ Correct Answer: **Label data by sensitivity so controls (encryption, access) match risk**
> ['Classify data by size only', 'Classify only after breach', 'Treat all data the same always']
> 

[Poll:1528: What are some common threats to cloud environments, and how can they be mitigated? ]
* Output encoding and Content Security Policy (CSP)
- VPC
- XSS
- Nmap
> Explanation:
> ✅ Correct Answer: **Misconfiguration, weak IAM, vulnerable components; mitigate via hardening, IAM, patching**
> ['Only physical attacks matter in cloud', 'Cloud providers prevent all software vulnerabilities', 'No mitigation is necessary if behind a VPN']
> 

[Poll:1529: What is the significance of a Virtual Private Cloud (VPC) in AWS? ]
- XSS
* Output encoding and Content Security Policy (CSP)
- Access policies
- Encryption
> Explanation:
> ✅ Correct Answer: **Provides isolated network environment and control over IPs and routing**
> ['VPC is an alternative to EC2 instances', 'VPC automatically encrypts data at rest', 'VPC replaces IAM roles']
> 

[Poll:1530: What are some common cloud misconfigurations that can lead to security vulnerabilities, and how can they be prevented? ]
* Apply input validation, avoid unsafe deserialization, and run services with least privilege
- Open S3 bucket
- MFA
- Metasploit
> Explanation:
> ✅ Correct Answer: **Public buckets, overly-permissive IAM, open security groups; prevent via scanning and policy enforcement**
> ['Only DNS settings cause misconfiguration', 'Misconfigurations cannot be detected', 'Allow all traffic to reduce complexity']
> 
> Note: option #1 was truncated for Telegram (original length 104).

[Poll:1531: Describe a scenario where a misconfigured IAM policy resulted in a data breach. How would you identify and rectify such misconfigurations? ]
- SQL Injection
* Overly-broad policy granted read to all S3 buckets; identify with access reviews and fix by narro…
- SBOM
- XSS
> Explanation:
> ✅ Correct Answer: **Overly-broad policy granted read to all S3 buckets; identify with access reviews and fix by narrowing policy**
> ['Ignore logs; hope nothing happens', 'Grant everyone admin as a quick fix', 'Delete all IAM roles']
> 
> Note: option #2 was truncated for Telegram (original length 108).

[Poll:1532: How do you ensure that security groups and network ACLs in AWS are correctly configured to prevent unintended exposure of resources? ]
- Zero Trust
- SQL Injection
* Output encoding and Content Security Policy (CSP)
- XSS
> Explanation:
> ✅ Correct Answer: **Regularly audit rules, use least-privilege ports, and automated compliance checks**
> ['Open all inbound ports for faster access', 'Rely on default security group only', 'Disable monitoring to reduce noise']
> 

[Poll:1533: What is AWS Identity and Access Management (IAM) Access Analyzer, and how can it help identify and fix misconfigurations in access policies? ]
- CSRF
- Snapshots
- SQL Injection
* A tool that analyzes policies to find resources shared with external principals
> Explanation:
> ✅ Correct Answer: **A tool that analyzes policies to find resources shared with external principals**
> ['A service to automate backups', 'A replacement for VPC', 'Only for billing alerts']
> 

[Poll:1534: Should you expose Database access publicly or to a web application directly? ]
- MFA
- Open S3 bucket
* No — use private networking and application-layer access with proper auth
- CSRF
> Explanation:
> ✅ Correct Answer: **No — use private networking and application-layer access with proper auth**
> ['Yes, to simplify development', 'Expose only to random IPs', 'Expose without auth behind a load balancer']
> 

[Poll:1535: Can you describe the process of designing a Cloud Security Standard for scanning and ensuring its consistent application across AWS environments? ]
- Terraform
* CSRF
- Define baseline controls, automate scans (IaC and runtime), and enforce via CI/CD policies
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Define baseline controls, automate scans (IaC and runtime), and enforce via CI/CD policies**
> ['Run a one-time manual scan', 'Apply different baselines per resource randomly', 'Rely solely on provider defaults']
> 
[Poll:1536: How would you define security baselines and metrics for auditing and threat modeling in a cloud environment, and what benefits does this bring to an organization? ]
* Use prepared statements / parameterized queries
- Automated scanning
- Snapshots
- SQL Injection
> Explanation:
> ✅ Correct Answer: **Baselines set minimum config; metrics track compliance and reduce risk through measurable controls**
> ['Metrics are irrelevant to security', 'Baselines should be overridden often', 'Threat modeling is optional']
> 

[Poll:1537: Walk me through the process of setting up automated backups for your cloud-based databases while ensuring their security. ]
- Enable automated snapshots, encrypt backups, control access to backup storage, and test restores
- XSS
* CSRF
- MFA
> Explanation:
> ✅ Correct Answer: **Enable automated snapshots, encrypt backups, control access to backup storage, and test restores**
> ['Store backups unencrypted in public buckets', 'Manually copy DB files once a year', 'Disable logging for snapshots']
> 
[Poll:1538: Explain how you would implement Zero Trust Architecture in a hybrid cloud environment that includes AWS and Azure. ]
- Policy-as-code
- Access policies
- Open S3 bucket
* Apply input validation, avoid unsafe deserialization, and run services with least privilege
> Explanation:
> ✅ Correct Answer: **Verify every request, enforce least privilege, micro-segmentation, and central identity control across clouds**
> ['Trust all internal traffic automatically', 'Use VPN only and ignore identities', 'Zero Trust means no encryption']
> 
> Note: option #4 was truncated for Telegram (original length 109).

[Poll:1539: Your company is migrating to the cloud. How would you ensure a secure transition, including data migration and application security? ]
- Encryption
* Assess risk, map responsibilities, use secure migration channels, scan apps, and enforce hardened…
- Open S3 bucket
- SBOM
> Explanation:
> ✅ Correct Answer: **Assess risk, map responsibilities, use secure migration channels, scan apps, and enforce hardened configs**
> ['Migrate everything overnight without testing', 'Disable security during migration', 'Expose data to public internet for speed']
> 
> Note: option #2 was truncated for Telegram (original length 105).

[Poll:1540: Describe a scenario where you had to respond to a critical security incident in your cloud environment. What steps did you take to contain and mitigate the incident? ]
- MFA
* Isolate affected systems, revoke compromised keys, analyze logs, apply patches, and notify stakeh…
- Key rotation
- Terraform
> Explanation:
> ✅ Correct Answer: **Isolate affected systems, revoke compromised keys, analyze logs, apply patches, and notify stakeholders**
> ['Ignore alerts to avoid panic', 'Delete logs to cover tracks', 'Immediately rebuild everything without analysis']
> 
> Note: option #2 was truncated for Telegram (original length 103).

[Poll:1541: How would you use Infrastructure as Code (IaC) tools like Terraform to automate security controls and ensure consistent security across cloud resources? ]
- Terraform
- Embed security controls in IaC modules, use policy-as-code and pre-commit scans in CI pipelines
- Key rotation
* X-Frame-Options
> Explanation:
> ✅ Correct Answer: **Embed security controls in IaC modules, use policy-as-code and pre-commit scans in CI pipelines**
> ['Only use IaC for networking, not security', 'Manually configure security after provisioning', 'Store secrets in code']
> 
[Poll:1542: What is an SBOM (Software Bill of Materials), and why is it important in cloud security? ]
- Key rotation
- VPC
* A list of software components and versions used; helps track vulnerable dependencies
- Terraform
> Explanation:
> ✅ Correct Answer: **A list of software components and versions used; helps track vulnerable dependencies**
> ['A security policy document', 'A backup manifest only', 'A logging tool']
> 

[Poll:1543: How can you generate and maintain an SBOM for the software components used in your cloud applications? ]
- XSS
- SBOM
- X-Frame-Options
* Use build tools that emit SBOMs, integrate generation into CI, and store SBOM artifacts centrally
> Explanation:
> ✅ Correct Answer: **Use build tools that emit SBOMs, integrate generation into CI, and store SBOM artifacts centrally**
> ['Write SBOMs manually on a spreadsheet only', 'Ignore SBOMs for third-party libs', 'Generate once and never update']
> 

[Poll:1544: Describe the role of SBOMs in vulnerability management and supply chain security. ]
- Backups
- Policy-as-code
- Open S3 bucket
* SBOMs let you map components to CVEs and prioritize remediation
> Explanation:
> ✅ Correct Answer: **SBOMs let you map components to CVEs and prioritize remediation**
> ['SBOMs replace vulnerability scanners entirely', 'SBOMs are only for license compliance', 'SBOMs slow down deployments']
> 

[Poll:1545: What challenges may arise when implementing SBOMs in a multi-cloud environment, and how can they be addressed? ]
- Policy-as-code
- Different tooling and formats; address with standard formats (SPDX) and automated pipelines
* Argon2
- SSRF
> Explanation:
> ✅ Correct Answer: **Different tooling and formats; address with standard formats (SPDX) and automated pipelines**
> ['SBOMs are impossible in multi-cloud', 'Only rely on vendor SBOMs', 'Avoid SBOMs to save time']
> 
[Poll:1546: Explain how SBOMs can be used to track and mitigate security vulnerabilities in containerized applications. ]
* Link image layers/components to CVE data and replace or patch vulnerable packages in builds
- Public DB
- MFA
- Defense in depth
> Explanation:
> ✅ Correct Answer: **Link image layers/components to CVE data and replace or patch vulnerable packages in builds**
> ['SBOMs auto-patch containers', 'SBOMs are irrelevant to containers', 'Only scan host OS']
> 

[Poll:1547: How do you approach vulnerability management at scale in a cloud environment with numerous resources? ]
- SBOM
- Nmap
* Automate discovery, prioritize by risk, and integrate scanning into CI/CD with tracked remediation
- CSP
> Explanation:
> ✅ Correct Answer: **Automate discovery, prioritize by risk, and integrate scanning into CI/CD with tracked remediation**
> ['Scan manually once per year', 'Ignore low-severity issues forever', 'Patch only when convenient']
> 

[Poll:1548: Describe the steps involved in conducting automated vulnerability scanning of cloud resources. ]
* Inventory assets, run authenticated scans, aggregate results, and feed into ticketing for remedia…
- Public DB
- SQL Injection
- HSTS
> Explanation:
> ✅ Correct Answer: **Inventory assets, run authenticated scans, aggregate results, and feed into ticketing for remediation**
> ['Run only unauthenticated scans externally', 'Scan without credentials and ignore results', 'Only scan after incidents']
> 
> Note: option #1 was truncated for Telegram (original length 101).

[Poll:1549: What is the role of asset discovery in effective vulnerability management, and how can it be automated? ]
- CSP
- Nmap
- Public DB
* Discover all assets via cloud APIs, tag them, and integrate discovery with scanning pipelines
> Explanation:
> ✅ Correct Answer: **Discover all assets via cloud APIs, tag them, and integrate discovery with scanning pipelines**
> ['Manually keep an asset spreadsheet', 'Only discover public assets', 'Discovery is not needed']
> 

[Poll:1550: How do you prioritize and remediate vulnerabilities based on their severity and impact in a large-scale cloud environment? ]
- Automated scanning
- Argon2
- Nmap
* Use CVSS, exposure and asset criticality; focus on high-risk, internet-exposed and high-impact as…
> Explanation:
> ✅ Correct Answer: **Use CVSS, exposure and asset criticality; focus on high-risk, internet-exposed and high-impact assets first**
> ['Remediate smallest issues first', 'Ticket by alphabetical order', 'Ignore critical CVEs']
> 
> 
> Note: option #4 was truncated for Telegram (original length 107).
